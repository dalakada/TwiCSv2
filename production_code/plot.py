#uncomment till here---> plot starts
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.optimize import curve_fit
from scipy.optimize import leastsq,least_squares


# #------------------------------------------with sketching derived from ambiguous entity and non-entity classes----------------------------------

# #----------------------------these are absolute top-15 values
# ranking_effectiveness_single_sketch=[ 1.0, 0.8333333333333334, 0.8571428571428571, 0.76, 0.7586206896551724, 0.7222222222222222, 0.7441860465116279, 0.7169811320754716, 0.6885245901639344, 0.6818181818181818, 0.6619718309859155, 0.64, 0.6363636363636364, 0.6219512195121951, 0.5714285714285714, 0.5670103092783505, 0.5943396226415094, 0.6, 0.5948275862068966]
# ranking_effectiveness_multi_sketch_cosine=[ 1.0, 0.8333333333333334, 0.7857142857142857, 0.68, 0.6896551724137931, 0.6111111111111112, 0.627906976744186, 0.5849056603773585, 0.5573770491803278, 0.5151515151515151, 0.5070422535211268, 0.5066666666666667, 0.5064935064935064, 0.4878048780487805, 0.4725274725274725, 0.4742268041237113, 0.5188679245283019, 0.5272727272727272, 0.5258620689655172]
# ranking_effectiveness_multi_sketch_euclidean=[ 1.0, 0.8333333333333334, 0.7857142857142857, 0.68, 0.6551724137931034, 0.5555555555555556, 0.5813953488372093, 0.5471698113207547, 0.5245901639344263, 0.48484848484848486, 0.4788732394366197, 0.48, 0.4935064935064935, 0.4878048780487805, 0.4725274725274725, 0.4845360824742268, 0.5283018867924528, 0.5454545454545454, 0.5431034482758621]
# combined_ranking_effectiveness=[ 1.0, 0.8333333333333334, 0.8571428571428571, 0.8, 0.8275862068965517, 0.7777777777777778, 0.7906976744186046, 0.7735849056603774, 0.7704918032786885, 0.7575757575757576, 0.7605633802816901, 0.76, 0.7662337662337663, 0.7560975609756098, 0.7252747252747253, 0.7216494845360825, 0.7452830188679245, 0.7545454545454545, 0.75]

# ranking_effectiveness_single_sketch_amb=  [1.0, 1.0, 0.6875, 0.56, 0.5, 0.45714285714285713, 0.40476190476190477, 0.33962264150943394, 0.3114754098360656, 0.2835820895522388, 0.2857142857142857, 0.2702702702702703, 0.2597402597402597, 0.23809523809523808, 0.23076923076923078, 0.24742268041237114, 0.2897196261682243, 0.2882882882882883, 0.30434782608695654]
# ranking_effectiveness_multi_sketch_cosine_amb= [1.0, 0.8571428571428571, 0.625, 0.48, 0.42857142857142855, 0.4, 0.35714285714285715, 0.3018867924528302, 0.29508196721311475, 0.26865671641791045, 0.2571428571428571, 0.24324324324324326, 0.23376623376623376, 0.21428571428571427, 0.2087912087912088, 0.2268041237113402, 0.2523364485981308, 0.26126126126126126, 0.2782608695652174]
# ranking_effectiveness_multi_sketch_euclidean_amb= [1.0, 0.8571428571428571, 0.5625, 0.44, 0.39285714285714285, 0.34285714285714286, 0.2857142857142857, 0.24528301886792453, 0.22950819672131148, 0.208955223880597, 0.2, 0.1891891891891892, 0.18181818181818182, 0.16666666666666666, 0.15384615384615385, 0.16494845360824742, 0.205607476635514, 0.21621621621621623, 0.23478260869565218]
# combined_ranking_effectiveness_amb=  [1.0, 1.0, 0.75, 0.64, 0.5714285714285714, 0.5142857142857142, 0.4523809523809524, 0.37735849056603776, 0.36065573770491804, 0.3283582089552239, 0.32857142857142857, 0.3108108108108108, 0.2987012987012987, 0.27380952380952384, 0.26373626373626374, 0.27835051546391754, 0.32710280373831774, 0.3333333333333333, 0.34782608695652173]

# all_combined_ranking_effectiveness=  [1.0, 1.0, 1.0, 1.0, 1.0, 0.9428571428571428, 0.9047619047619048, 0.8867924528301887, 0.9016393442622951, 0.8805970149253731, 0.8714285714285714, 0.8648648648648649, 0.8571428571428571, 0.8452380952380952, 0.8241758241758241, 0.8350515463917526, 0.8504672897196262, 0.8558558558558559, 0.8608695652173913]

# # #----------------------------these are top-15 percent values

# # ranking_effectiveness_single_sketch_amb=  [0.0, 0.125, 0.16666666666666666, 0.14814814814814814, 0.12121212121212122, 0.13513513513513514, 0.14583333333333334, 0.14035087719298245, 0.13846153846153847, 0.13513513513513514, 0.14285714285714285, 0.1375, 0.13953488372093023, 0.1348314606741573, 0.14583333333333334, 0.15841584158415842, 0.1651376146788991, 0.17391304347826086, 0.17094017094017094]
# # ranking_effectiveness_multi_sketch_cosine_amb=  [0.0, 0.125, 0.16666666666666666, 0.2222222222222222, 0.18181818181818182, 0.1891891891891892, 0.1875, 0.17543859649122806, 0.16923076923076924, 0.16216216216216217, 0.16883116883116883, 0.1625, 0.16279069767441862, 0.15730337078651685, 0.16666666666666666, 0.1782178217821782, 0.1926605504587156, 0.2, 0.20512820512820512]
# # ranking_effectiveness_multi_sketch_euclidean_amb=  [0.0, 0.125, 0.1111111111111111, 0.14814814814814814, 0.12121212121212122, 0.13513513513513514, 0.10416666666666667, 0.10526315789473684, 0.1076923076923077, 0.10810810810810811, 0.1038961038961039, 0.1, 0.10465116279069768, 0.10112359550561797, 0.11458333333333333, 0.10891089108910891, 0.12844036697247707, 0.1391304347826087, 0.13675213675213677]
# # combined_ranking_effectiveness_amb=  [0.0, 0.125, 0.2222222222222222, 0.25925925925925924, 0.21212121212121213, 0.21621621621621623, 0.22916666666666666, 0.21052631578947367, 0.23076923076923078, 0.21621621621621623, 0.22077922077922077, 0.2125, 0.20930232558139536, 0.20224719101123595, 0.20833333333333334, 0.21782178217821782, 0.22935779816513763, 0.23478260869565218, 0.23931623931623933]
# # all_combined_ranking_effectiveness=   [0.5, 0.625, 0.6666666666666666, 0.7777777777777778, 0.7878787878787878, 0.7837837837837838, 0.7708333333333334, 0.7894736842105263, 0.8, 0.7702702702702703, 0.7662337662337663, 0.7625, 0.7674418604651163, 0.7752808988764045, 0.7916666666666666, 0.7920792079207921, 0.7981651376146789, 0.7913043478260869, 0.7948717948717948]


# batches= range(1,20)

# # for i in range(10,30,5):
# # 	print(i)

# #adding comment for pseudo push


# # print(len(ranking_effectiveness_single_sketch),len(ranking_effectiveness_multi_sketch_cosine),len(ranking_effectiveness_multi_sketch_euclidean),len(combined_ranking_effectiveness))

# fig = plt.figure()

# plt.hold(True)
# plt.xticks(np.arange(1, 20, 1.0))

# plt.scatter(batches,ranking_effectiveness_single_sketch,label='single entity/non-entity sketch, cosine distance')
# plt.scatter(batches,ranking_effectiveness_multi_sketch_cosine,label='multiple entity/non-entity sketches, cosine distance')
# plt.scatter(batches,ranking_effectiveness_multi_sketch_euclidean,label='multiple entity/non-entity sketches, euclidean distance')
# plt.scatter(batches,combined_ranking_effectiveness,label='multiple entity/non-entity sketching techniques combined')

# plt.scatter(batches,ranking_effectiveness_single_sketch_amb,label='single ambiguous sketch, cosine distance')
# plt.scatter(batches,ranking_effectiveness_multi_sketch_cosine_amb,label='multiple ambiguous sketches, cosine distance')
# plt.scatter(batches,ranking_effectiveness_multi_sketch_euclidean_amb,label='multiple ambiguous sketches, euclidean distance')
# plt.scatter(batches,combined_ranking_effectiveness_amb,label='multiple ambiguous sketching techniques combined')

# plt.scatter(batches,all_combined_ranking_effectiveness,label='all sketching techniques combined')

# plt.title("Ranking Function Effectiveness")
# # plt.ylabel('ranking fucntion top-15 effectiveness')
# plt.ylabel('ranking fucntion top-15 percent effectiveness')
# plt.xlabel('Current Batch')
# lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# # plt.savefig('effectiveness-sketching.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
# plt.savefig('effectiveness-sketching-top-15-percent.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
# plt.show()

# #determining optimal top-k in ranking; absolute k
# k_values=[10,15,20,25,30]
# ranking_effectiveness_single_sketch=  [[1.0, 1.0, 1.0, 1.0, 1.0], [0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 1.0, 1.0], [0.7333333333333333, 0.8666666666666667, 0.9333333333333333, 1.0, 1.0], [0.64, 0.76, 0.8, 0.96, 0.96], [0.6666666666666666, 0.7666666666666667, 0.8, 0.9333333333333333, 0.9333333333333333], [0.6571428571428571, 0.7714285714285715, 0.8285714285714286, 0.9428571428571428, 0.9428571428571428], [0.627906976744186, 0.7441860465116279, 0.7906976744186046, 0.8837209302325582, 0.8837209302325582], [0.6153846153846154, 0.7307692307692307, 0.7884615384615384, 0.8653846153846154, 0.8846153846153846], [0.5573770491803278, 0.6885245901639344, 0.7540983606557377, 0.819672131147541, 0.8360655737704918], [0.5303030303030303, 0.6666666666666666, 0.7272727272727273, 0.803030303030303, 0.8181818181818182], [0.5285714285714286, 0.6571428571428571, 0.7142857142857143, 0.7857142857142857, 0.8142857142857143], [0.5135135135135135, 0.6351351351351351, 0.6891891891891891, 0.7702702702702703, 0.7972972972972973], [0.5194805194805194, 0.6363636363636364, 0.6883116883116883, 0.7662337662337663, 0.8051948051948052], [0.5060240963855421, 0.6144578313253012, 0.6746987951807228, 0.7590361445783133, 0.7951807228915663], [0.4725274725274725, 0.5714285714285714, 0.6373626373626373, 0.7362637362637363, 0.7692307692307693], [0.4742268041237113, 0.5670103092783505, 0.6288659793814433, 0.7319587628865979, 0.7628865979381443], [0.4953271028037383, 0.5981308411214953, 0.6542056074766355, 0.7570093457943925, 0.7850467289719626], [0.48672566371681414, 0.5929203539823009, 0.6548672566371682, 0.7699115044247787, 0.7964601769911505], [0.4956521739130435, 0.6, 0.6608695652173913, 0.7739130434782608, 0.8]]
# ranking_effectiveness_multi_sketch_cosine=  [[1.0, 1.0, 1.0, 1.0, 1.0], [0.8571428571428571, 0.8571428571428571, 1.0, 1.0, 1.0], [0.6666666666666666, 0.8666666666666667, 0.9333333333333333, 0.9333333333333333, 1.0], [0.52, 0.76, 0.84, 0.84, 0.96], [0.5, 0.7333333333333333, 0.8666666666666667, 0.8666666666666667, 0.9666666666666667], [0.45714285714285713, 0.6857142857142857, 0.8571428571428571, 0.8857142857142857, 0.9714285714285714], [0.4418604651162791, 0.6511627906976745, 0.8372093023255814, 0.8604651162790697, 0.9302325581395349], [0.4423076923076923, 0.6153846153846154, 0.7884615384615384, 0.8461538461538461, 0.9230769230769231], [0.4426229508196721, 0.5901639344262295, 0.7377049180327869, 0.8032786885245902, 0.9016393442622951], [0.4090909090909091, 0.5454545454545454, 0.6818181818181818, 0.7727272727272727, 0.8787878787878788], [0.4142857142857143, 0.5428571428571428, 0.6714285714285714, 0.7714285714285715, 0.8857142857142857], [0.4189189189189189, 0.5405405405405406, 0.6621621621621622, 0.7567567567567568, 0.8783783783783784], [0.4155844155844156, 0.5454545454545454, 0.6623376623376623, 0.7532467532467533, 0.8701298701298701], [0.40963855421686746, 0.5301204819277109, 0.6626506024096386, 0.7469879518072289, 0.8554216867469879], [0.4065934065934066, 0.5164835164835165, 0.6373626373626373, 0.7362637362637363, 0.8351648351648352], [0.3917525773195876, 0.5154639175257731, 0.6391752577319587, 0.7319587628865979, 0.8247422680412371], [0.411214953271028, 0.5607476635514018, 0.6728971962616822, 0.7570093457943925, 0.8411214953271028], [0.415929203539823, 0.5663716814159292, 0.6814159292035398, 0.7699115044247787, 0.8495575221238938], [0.40869565217391307, 0.5652173913043478, 0.6782608695652174, 0.7739130434782608, 0.8521739130434782]]
# ranking_effectiveness_multi_sketch_euclidean=  [[1.0, 1.0, 1.0, 1.0, 1.0], [0.8571428571428571, 0.8571428571428571, 1.0, 1.0, 1.0], [0.6666666666666666, 0.8, 0.9333333333333333, 0.9333333333333333, 0.9333333333333333], [0.52, 0.72, 0.84, 0.84, 0.92], [0.5, 0.7, 0.8666666666666667, 0.8666666666666667, 0.9333333333333333], [0.45714285714285713, 0.6571428571428571, 0.8571428571428571, 0.8857142857142857, 0.9428571428571428], [0.4418604651162791, 0.627906976744186, 0.8372093023255814, 0.8604651162790697, 0.9069767441860465], [0.4230769230769231, 0.5961538461538461, 0.7884615384615384, 0.8461538461538461, 0.9038461538461539], [0.4262295081967213, 0.5737704918032787, 0.7377049180327869, 0.8032786885245902, 0.8852459016393442], [0.3939393939393939, 0.5303030303030303, 0.6818181818181818, 0.7575757575757576, 0.8636363636363636], [0.4, 0.5285714285714286, 0.6714285714285714, 0.7571428571428571, 0.8714285714285714], [0.40540540540540543, 0.527027027027027, 0.6621621621621622, 0.7432432432432432, 0.8648648648648649], [0.4025974025974026, 0.5324675324675324, 0.6623376623376623, 0.7402597402597403, 0.8571428571428571], [0.39759036144578314, 0.5301204819277109, 0.6626506024096386, 0.7349397590361446, 0.8433734939759037], [0.38461538461538464, 0.5164835164835165, 0.6483516483516484, 0.7142857142857143, 0.8241758241758241], [0.3711340206185567, 0.5257731958762887, 0.6494845360824743, 0.711340206185567, 0.8144329896907216], [0.3925233644859813, 0.5700934579439252, 0.6822429906542056, 0.7383177570093458, 0.8317757009345794], [0.39823008849557523, 0.584070796460177, 0.6902654867256637, 0.7522123893805309, 0.8407079646017699], [0.391304347826087, 0.5826086956521739, 0.6956521739130435, 0.7565217391304347, 0.8434782608695652]]
# combined_ranking_effectiveness= [[1.0, 1.0, 1.0, 1.0, 1.0], [0.8571428571428571, 0.8571428571428571, 1.0, 1.0, 1.0], [0.8, 0.8666666666666667, 1.0, 1.0, 1.0], [0.72, 0.8, 0.88, 0.96, 0.96], [0.7333333333333333, 0.8, 0.9, 0.9666666666666667, 0.9666666666666667], [0.7142857142857143, 0.8, 0.9142857142857143, 0.9714285714285714, 0.9714285714285714], [0.6744186046511628, 0.7674418604651163, 0.8837209302325582, 0.9302325581395349, 0.9302325581395349], [0.6730769230769231, 0.7692307692307693, 0.8846153846153846, 0.9230769230769231, 0.9423076923076923], [0.6557377049180327, 0.7704918032786885, 0.8852459016393442, 0.9180327868852459, 0.9344262295081968], [0.6212121212121212, 0.7424242424242424, 0.8484848484848485, 0.9090909090909091, 0.9242424242424242], [0.6428571428571429, 0.7571428571428571, 0.8571428571428571, 0.9142857142857143, 0.9285714285714286], [0.6486486486486487, 0.7567567567567568, 0.8513513513513513, 0.918918918918919, 0.9324324324324325], [0.6493506493506493, 0.7532467532467533, 0.8441558441558441, 0.9090909090909091, 0.935064935064935], [0.6506024096385542, 0.7469879518072289, 0.8433734939759037, 0.9156626506024096, 0.9397590361445783], [0.6373626373626373, 0.7252747252747253, 0.8351648351648352, 0.9230769230769231, 0.945054945054945], [0.6288659793814433, 0.7216494845360825, 0.8247422680412371, 0.9175257731958762, 0.9381443298969072], [0.6542056074766355, 0.7476635514018691, 0.8411214953271028, 0.9252336448598131, 0.9439252336448598], [0.6548672566371682, 0.7522123893805309, 0.8407079646017699, 0.9292035398230089, 0.9469026548672567], [0.6608695652173913, 0.7565217391304347, 0.8434782608695652, 0.9304347826086956, 0.9478260869565217]]

# ranking_effectiveness_ambiguous_single_sketch=  [[0.3333333333333333, 0.8333333333333334, 1.0, 1.0, 1.0], [0.36363636363636365, 0.7272727272727273, 0.9090909090909091, 1.0, 1.0], [0.3333333333333333, 0.6111111111111112, 0.7777777777777778, 0.8333333333333334, 0.8888888888888888], [0.23076923076923078, 0.5, 0.7307692307692307, 0.8461538461538461, 0.8846153846153846], [0.17647058823529413, 0.5, 0.6764705882352942, 0.8235294117647058, 0.8529411764705882], [0.18421052631578946, 0.47368421052631576, 0.631578947368421, 0.7894736842105263, 0.8157894736842105], [0.1836734693877551, 0.42857142857142855, 0.5510204081632653, 0.7346938775510204, 0.7959183673469388], [0.16393442622950818, 0.39344262295081966, 0.4918032786885246, 0.6721311475409836, 0.7377049180327869], [0.14925373134328357, 0.3880597014925373, 0.4925373134328358, 0.6567164179104478, 0.7164179104477612], [0.13157894736842105, 0.3815789473684211, 0.4868421052631579, 0.631578947368421, 0.7105263157894737], [0.1282051282051282, 0.38461538461538464, 0.48717948717948717, 0.6282051282051282, 0.717948717948718], [0.12345679012345678, 0.37037037037037035, 0.4691358024691358, 0.6296296296296297, 0.7160493827160493], [0.11235955056179775, 0.33707865168539325, 0.43820224719101125, 0.5842696629213483, 0.6741573033707865], [0.10869565217391304, 0.32608695652173914, 0.43478260869565216, 0.5760869565217391, 0.6630434782608695], [0.1111111111111111, 0.31313131313131315, 0.41414141414141414, 0.5555555555555556, 0.6464646464646465], [0.1262135922330097, 0.32038834951456313, 0.4174757281553398, 0.5533980582524272, 0.6407766990291263], [0.14285714285714285, 0.3482142857142857, 0.45535714285714285, 0.5892857142857143, 0.6696428571428571], [0.16666666666666666, 0.36666666666666664, 0.48333333333333334, 0.6083333333333333, 0.6833333333333333], [0.184, 0.376, 0.496, 0.616, 0.696]]
# ranking_effectiveness_ambiguous_multi_sketch_cosine=  [[0.5, 1.0, 1.0, 1.0, 1.0], [0.5454545454545454, 0.8181818181818182, 0.8181818181818182, 0.9090909090909091, 1.0], [0.4444444444444444, 0.6111111111111112, 0.6111111111111112, 0.7222222222222222, 0.8333333333333334], [0.38461538461538464, 0.5769230769230769, 0.5769230769230769, 0.6923076923076923, 0.8076923076923077], [0.35294117647058826, 0.5588235294117647, 0.5588235294117647, 0.6470588235294118, 0.7352941176470589], [0.34210526315789475, 0.5263157894736842, 0.5263157894736842, 0.631578947368421, 0.7105263157894737], [0.2857142857142857, 0.46938775510204084, 0.4897959183673469, 0.5714285714285714, 0.6530612244897959], [0.26229508196721313, 0.4098360655737705, 0.4262295081967213, 0.5081967213114754, 0.5737704918032787], [0.23880597014925373, 0.40298507462686567, 0.43283582089552236, 0.5074626865671642, 0.5671641791044776], [0.2236842105263158, 0.39473684210526316, 0.4342105263157895, 0.5, 0.5789473684210527], [0.21794871794871795, 0.3974358974358974, 0.44871794871794873, 0.5128205128205128, 0.5897435897435898], [0.20987654320987653, 0.38271604938271603, 0.43209876543209874, 0.5185185185185185, 0.5925925925925926], [0.19101123595505617, 0.3595505617977528, 0.4044943820224719, 0.48314606741573035, 0.5617977528089888], [0.18478260869565216, 0.358695652173913, 0.40217391304347827, 0.4782608695652174, 0.5543478260869565], [0.18181818181818182, 0.3434343434343434, 0.3838383838383838, 0.46464646464646464, 0.5353535353535354], [0.18446601941747573, 0.34951456310679613, 0.3883495145631068, 0.46601941747572817, 0.5339805825242718], [0.20535714285714285, 0.36607142857142855, 0.41964285714285715, 0.5, 0.5714285714285714], [0.225, 0.38333333333333336, 0.43333333333333335, 0.5166666666666667, 0.5833333333333334], [0.24, 0.392, 0.448, 0.528, 0.592]]
# ranking_effectiveness_ambiguous_multi_sketch_euclidean=  [[0.5, 1.0, 1.0, 1.0, 1.0], [0.5454545454545454, 0.8181818181818182, 0.8181818181818182, 0.9090909090909091, 1.0], [0.3888888888888889, 0.5555555555555556, 0.6111111111111112, 0.7222222222222222, 0.8333333333333334], [0.3076923076923077, 0.46153846153846156, 0.6153846153846154, 0.6923076923076923, 0.8461538461538461], [0.29411764705882354, 0.4411764705882353, 0.5882352941176471, 0.6470588235294118, 0.7941176470588235], [0.2631578947368421, 0.42105263157894735, 0.5789473684210527, 0.631578947368421, 0.7631578947368421], [0.22448979591836735, 0.3469387755102041, 0.5102040816326531, 0.5510204081632653, 0.6938775510204082], [0.19672131147540983, 0.3114754098360656, 0.4426229508196721, 0.47540983606557374, 0.5901639344262295], [0.19402985074626866, 0.29850746268656714, 0.417910447761194, 0.4626865671641791, 0.5970149253731343], [0.18421052631578946, 0.3026315789473684, 0.42105263157894735, 0.47368421052631576, 0.5921052631578947], [0.1794871794871795, 0.2948717948717949, 0.4230769230769231, 0.47435897435897434, 0.6025641025641025], [0.1728395061728395, 0.2839506172839506, 0.4074074074074074, 0.4567901234567901, 0.5925925925925926], [0.16853932584269662, 0.2696629213483146, 0.38202247191011235, 0.42696629213483145, 0.550561797752809], [0.17391304347826086, 0.2717391304347826, 0.3804347826086957, 0.42391304347826086, 0.5434782608695652], [0.16161616161616163, 0.25252525252525254, 0.36363636363636365, 0.41414141414141414, 0.5353535353535354], [0.1553398058252427, 0.24271844660194175, 0.3592233009708738, 0.4077669902912621, 0.5339805825242718], [0.17857142857142858, 0.26785714285714285, 0.39285714285714285, 0.44642857142857145, 0.5714285714285714], [0.2, 0.2916666666666667, 0.4083333333333333, 0.4666666666666667, 0.5916666666666667], [0.2, 0.296, 0.424, 0.48, 0.6]]
# combined_ranking_ambiguous_sketch_effectiveness=  [[0.6666666666666666, 1.0, 1.0, 1.0, 1.0], [0.6363636363636364, 0.9090909090909091, 0.9090909090909091, 1.0, 1.0], [0.5555555555555556, 0.7222222222222222, 0.7777777777777778, 0.8333333333333334, 0.8888888888888888], [0.46153846153846156, 0.6923076923076923, 0.7692307692307693, 0.8461538461538461, 0.8846153846153846], [0.4411764705882353, 0.6470588235294118, 0.7058823529411765, 0.8235294117647058, 0.8529411764705882], [0.42105263157894735, 0.6052631578947368, 0.6842105263157895, 0.7894736842105263, 0.8157894736842105], [0.3673469387755102, 0.5510204081632653, 0.6326530612244898, 0.7346938775510204, 0.7959183673469388], [0.32786885245901637, 0.4918032786885246, 0.5573770491803278, 0.6721311475409836, 0.7377049180327869], [0.31343283582089554, 0.4925373134328358, 0.5522388059701493, 0.6567164179104478, 0.7313432835820896], [0.3026315789473684, 0.47368421052631576, 0.5394736842105263, 0.6447368421052632, 0.7236842105263158], [0.2948717948717949, 0.47435897435897434, 0.5512820512820513, 0.6538461538461539, 0.7307692307692307], [0.2839506172839506, 0.4567901234567901, 0.5308641975308642, 0.654320987654321, 0.7283950617283951], [0.2696629213483146, 0.42696629213483145, 0.4943820224719101, 0.6067415730337079, 0.6853932584269663], [0.2717391304347826, 0.42391304347826086, 0.4891304347826087, 0.5978260869565217, 0.6739130434782609], [0.26262626262626265, 0.40404040404040403, 0.46464646464646464, 0.5858585858585859, 0.6666666666666666], [0.27184466019417475, 0.4077669902912621, 0.46601941747572817, 0.5825242718446602, 0.6601941747572816], [0.2857142857142857, 0.4375, 0.5, 0.6160714285714286, 0.6875], [0.30833333333333335, 0.4583333333333333, 0.525, 0.6333333333333333, 0.7], [0.32, 0.464, 0.544, 0.648, 0.712]]

# combined_ranking_all_sketches_effectiveness=  [[1.0, 1.0, 1.0, 1.0, 1.0], [0.9090909090909091, 1.0, 1.0, 1.0, 1.0], [0.8333333333333334, 0.9444444444444444, 1.0, 1.0, 1.0], [0.8846153846153846, 0.9615384615384616, 1.0, 1.0, 1.0], [0.8823529411764706, 0.9705882352941176, 1.0, 1.0, 1.0], [0.868421052631579, 0.9736842105263158, 1.0, 1.0, 1.0], [0.8163265306122449, 0.9387755102040817, 0.9795918367346939, 1.0, 1.0], [0.7704918032786885, 0.9016393442622951, 0.9508196721311475, 0.9836065573770492, 1.0], [0.746268656716418, 0.8955223880597015, 0.9402985074626866, 0.9701492537313433, 1.0], [0.7236842105263158, 0.881578947368421, 0.9210526315789473, 0.9605263157894737, 1.0], [0.7307692307692307, 0.8846153846153846, 0.9230769230769231, 0.9615384615384616, 1.0], [0.7160493827160493, 0.8888888888888888, 0.9259259259259259, 0.9629629629629629, 1.0], [0.7078651685393258, 0.8651685393258427, 0.9101123595505618, 0.9438202247191011, 0.9887640449438202], [0.7065217391304348, 0.8586956521739131, 0.9130434782608695, 0.9456521739130435, 0.9891304347826086], [0.696969696969697, 0.8383838383838383, 0.898989898989899, 0.9494949494949495, 0.98989898989899], [0.7087378640776699, 0.8446601941747572, 0.9029126213592233, 0.9514563106796117, 0.9902912621359223], [0.7321428571428571, 0.8571428571428571, 0.9107142857142857, 0.9553571428571429, 0.9910714285714286], [0.7416666666666667, 0.8666666666666667, 0.9166666666666666, 0.9583333333333334, 0.9916666666666667], [0.744, 0.864, 0.92, 0.96, 0.992]]


#determining optimal top-k in ranking; percentage k
k_values=[20,25,30,35,40]

ranking_effectiveness_single_sketch=  [[0.25, 0.5, 0.5, 0.5, 0.5], [0.375, 0.625, 0.625, 0.625, 0.625], [0.2777777777777778, 0.5, 0.5555555555555556, 0.6111111111111112, 0.7222222222222222], [0.3333333333333333, 0.5185185185185185, 0.5555555555555556, 0.5925925925925926, 0.6666666666666666], [0.36363636363636365, 0.5757575757575758, 0.6060606060606061, 0.6363636363636364, 0.696969696969697], [0.40540540540540543, 0.5945945945945946, 0.6486486486486487, 0.6756756756756757, 0.7297297297297297], [0.4375, 0.625, 0.6666666666666666, 0.6875, 0.75], [0.45614035087719296, 0.6491228070175439, 0.6842105263157895, 0.7017543859649122, 0.7543859649122807], [0.46153846153846156, 0.6307692307692307, 0.676923076923077, 0.6923076923076923, 0.7384615384615385], [0.44594594594594594, 0.5945945945945946, 0.6351351351351351, 0.6621621621621622, 0.7162162162162162], [0.45454545454545453, 0.5974025974025974, 0.6363636363636364, 0.6623376623376623, 0.7142857142857143], [0.45, 0.5875, 0.625, 0.6625, 0.7125], [0.4418604651162791, 0.5697674418604651, 0.6046511627906976, 0.6511627906976745, 0.7093023255813954], [0.4606741573033708, 0.5842696629213483, 0.6179775280898876, 0.6629213483146067, 0.7191011235955056], [0.4375, 0.5729166666666666, 0.6041666666666666, 0.6458333333333334, 0.7083333333333334], [0.44554455445544555, 0.5742574257425742, 0.6039603960396039, 0.6435643564356436, 0.7128712871287128], [0.44036697247706424, 0.5688073394495413, 0.5963302752293578, 0.6422018348623854, 0.7064220183486238], [0.4260869565217391, 0.5565217391304348, 0.591304347826087, 0.6347826086956522, 0.7043478260869566], [0.42735042735042733, 0.5641025641025641, 0.5982905982905983, 0.6410256410256411, 0.7094017094017094]]
ranking_effectiveness_multi_sketch_cosine=  [[0.25, 0.25, 0.25, 0.25, 0.25], [0.375, 0.5, 0.5, 0.5, 0.5], [0.3333333333333333, 0.3888888888888889, 0.4444444444444444, 0.5555555555555556, 0.6111111111111112], [0.3333333333333333, 0.4074074074074074, 0.4444444444444444, 0.5555555555555556, 0.6666666666666666], [0.3333333333333333, 0.42424242424242425, 0.45454545454545453, 0.5757575757575758, 0.696969696969697], [0.32432432432432434, 0.40540540540540543, 0.4594594594594595, 0.5945945945945946, 0.7027027027027027], [0.3125, 0.4166666666666667, 0.4583333333333333, 0.625, 0.7291666666666666], [0.3333333333333333, 0.42105263157894735, 0.47368421052631576, 0.6140350877192983, 0.7368421052631579], [0.35384615384615387, 0.4307692307692308, 0.47692307692307695, 0.6153846153846154, 0.7230769230769231], [0.32432432432432434, 0.3918918918918919, 0.43243243243243246, 0.5540540540540541, 0.6891891891891891], [0.3116883116883117, 0.37662337662337664, 0.4155844155844156, 0.5454545454545454, 0.6753246753246753], [0.3125, 0.375, 0.4125, 0.5375, 0.6625], [0.3488372093023256, 0.4069767441860465, 0.4418604651162791, 0.5581395348837209, 0.6744186046511628], [0.34831460674157305, 0.4157303370786517, 0.449438202247191, 0.5617977528089888, 0.6741573033707865], [0.3541666666666667, 0.4375, 0.46875, 0.5729166666666666, 0.6770833333333334], [0.3465346534653465, 0.43564356435643564, 0.4752475247524752, 0.5841584158415841, 0.6831683168316832], [0.3394495412844037, 0.43119266055045874, 0.47706422018348627, 0.5871559633027523, 0.6788990825688074], [0.34782608695652173, 0.43478260869565216, 0.4782608695652174, 0.5826086956521739, 0.6782608695652174], [0.3418803418803419, 0.42735042735042733, 0.4700854700854701, 0.5811965811965812, 0.6752136752136753]]
ranking_effectiveness_multi_sketch_euclidean=  [[0.25, 0.25, 0.25, 0.5, 0.5], [0.375, 0.5, 0.5, 0.625, 0.625], [0.3333333333333333, 0.4444444444444444, 0.4444444444444444, 0.6111111111111112, 0.6666666666666666], [0.3333333333333333, 0.4444444444444444, 0.48148148148148145, 0.6296296296296297, 0.7037037037037037], [0.36363636363636365, 0.45454545454545453, 0.48484848484848486, 0.6363636363636364, 0.7272727272727273], [0.35135135135135137, 0.43243243243243246, 0.4864864864864865, 0.6486486486486487, 0.7297297297297297], [0.3541666666666667, 0.4375, 0.4791666666666667, 0.6458333333333334, 0.75], [0.3684210526315789, 0.43859649122807015, 0.47368421052631576, 0.631578947368421, 0.7543859649122807], [0.38461538461538464, 0.4461538461538462, 0.47692307692307695, 0.6307692307692307, 0.7384615384615385], [0.35135135135135137, 0.40540540540540543, 0.43243243243243246, 0.5675675675675675, 0.7027027027027027], [0.33766233766233766, 0.38961038961038963, 0.4155844155844156, 0.5584415584415584, 0.6883116883116883], [0.3375, 0.3875, 0.4125, 0.55, 0.675], [0.37209302325581395, 0.4186046511627907, 0.4418604651162791, 0.5697674418604651, 0.686046511627907], [0.38202247191011235, 0.42696629213483145, 0.449438202247191, 0.5730337078651685, 0.6966292134831461], [0.3958333333333333, 0.4375, 0.46875, 0.5833333333333334, 0.6979166666666666], [0.38613861386138615, 0.43564356435643564, 0.48514851485148514, 0.594059405940594, 0.7029702970297029], [0.3761467889908257, 0.43119266055045874, 0.48623853211009177, 0.5963302752293578, 0.7064220183486238], [0.3826086956521739, 0.43478260869565216, 0.48695652173913045, 0.591304347826087, 0.7043478260869566], [0.37606837606837606, 0.42735042735042733, 0.47863247863247865, 0.5897435897435898, 0.7008547008547008]]
combined_ranking_effectiveness= [[0.25, 0.5, 0.5, 0.5, 0.5], [0.375, 0.625, 0.625, 0.625, 0.625], [0.3333333333333333, 0.6111111111111112, 0.6666666666666666, 0.6666666666666666, 0.7777777777777778], [0.4444444444444444, 0.6666666666666666, 0.7037037037037037, 0.7037037037037037, 0.7777777777777778], [0.45454545454545453, 0.696969696969697, 0.7272727272727273, 0.7272727272727273, 0.8181818181818182], [0.4864864864864865, 0.7027027027027027, 0.7567567567567568, 0.7567567567567568, 0.8378378378378378], [0.5, 0.7083333333333334, 0.75, 0.7708333333333334, 0.8541666666666666], [0.5263157894736842, 0.7368421052631579, 0.7719298245614035, 0.7894736842105263, 0.8596491228070176], [0.5538461538461539, 0.7384615384615385, 0.7846153846153846, 0.8, 0.8615384615384616], [0.5405405405405406, 0.7027027027027027, 0.7432432432432432, 0.7702702702702703, 0.8513513513513513], [0.5454545454545454, 0.7012987012987013, 0.7402597402597403, 0.7662337662337663, 0.8441558441558441], [0.55, 0.7, 0.7375, 0.775, 0.85], [0.5697674418604651, 0.7093023255813954, 0.7441860465116279, 0.7906976744186046, 0.8604651162790697], [0.5842696629213483, 0.7191011235955056, 0.7528089887640449, 0.797752808988764, 0.8651685393258427], [0.59375, 0.7395833333333334, 0.7708333333333334, 0.8125, 0.875], [0.594059405940594, 0.7326732673267327, 0.7722772277227723, 0.8118811881188119, 0.8811881188118812], [0.5871559633027523, 0.7247706422018348, 0.7706422018348624, 0.8165137614678899, 0.8807339449541285], [0.5826086956521739, 0.7217391304347827, 0.7739130434782608, 0.8173913043478261, 0.8869565217391304], [0.5811965811965812, 0.7264957264957265, 0.7777777777777778, 0.8205128205128205, 0.8888888888888888]]

ranking_effectiveness_ambiguous_single_sketch=  [[0.0, 0.0, 0.0, 0.0, 0.0], [0.125, 0.125, 0.25, 0.25, 0.25], [0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.3333333333333333, 0.3333333333333333], [0.1111111111111111, 0.14814814814814814, 0.2962962962962963, 0.37037037037037035, 0.4074074074074074], [0.09090909090909091, 0.12121212121212122, 0.24242424242424243, 0.3333333333333333, 0.36363636363636365], [0.10810810810810811, 0.13513513513513514, 0.24324324324324326, 0.32432432432432434, 0.3783783783783784], [0.10416666666666667, 0.14583333333333334, 0.22916666666666666, 0.3333333333333333, 0.4375], [0.10526315789473684, 0.14035087719298245, 0.21052631578947367, 0.3333333333333333, 0.42105263157894735], [0.09230769230769231, 0.13846153846153847, 0.2, 0.3384615384615385, 0.4307692307692308], [0.0945945945945946, 0.13513513513513514, 0.20270270270270271, 0.33783783783783783, 0.4189189189189189], [0.09090909090909091, 0.14285714285714285, 0.2077922077922078, 0.33766233766233766, 0.4155844155844156], [0.0875, 0.1375, 0.2, 0.325, 0.425], [0.08139534883720931, 0.13953488372093023, 0.19767441860465115, 0.32558139534883723, 0.4186046511627907], [0.07865168539325842, 0.1348314606741573, 0.19101123595505617, 0.3146067415730337, 0.4044943820224719], [0.08333333333333333, 0.14583333333333334, 0.19791666666666666, 0.3333333333333333, 0.4166666666666667], [0.09900990099009901, 0.15841584158415842, 0.2079207920792079, 0.33663366336633666, 0.4158415841584158], [0.11009174311926606, 0.1651376146788991, 0.21100917431192662, 0.3394495412844037, 0.42201834862385323], [0.12173913043478261, 0.17391304347826086, 0.22608695652173913, 0.34782608695652173, 0.43478260869565216], [0.11965811965811966, 0.17094017094017094, 0.23076923076923078, 0.3504273504273504, 0.4358974358974359]]
ranking_effectiveness_ambiguous_multi_sketch_cosine=  [[0.0, 0.0, 0.0, 0.0, 0.0], [0.125, 0.125, 0.25, 0.375, 0.375], [0.1111111111111111, 0.16666666666666666, 0.2222222222222222, 0.2777777777777778, 0.3333333333333333], [0.14814814814814814, 0.2222222222222222, 0.2962962962962963, 0.37037037037037035, 0.4444444444444444], [0.12121212121212122, 0.18181818181818182, 0.2727272727272727, 0.3333333333333333, 0.3939393939393939], [0.13513513513513514, 0.1891891891891892, 0.2702702702702703, 0.32432432432432434, 0.3783783783783784], [0.10416666666666667, 0.1875, 0.2708333333333333, 0.3333333333333333, 0.375], [0.10526315789473684, 0.17543859649122806, 0.24561403508771928, 0.2982456140350877, 0.3333333333333333], [0.09230769230769231, 0.16923076923076924, 0.24615384615384617, 0.2923076923076923, 0.3384615384615385], [0.0945945945945946, 0.16216216216216217, 0.24324324324324326, 0.28378378378378377, 0.32432432432432434], [0.09090909090909091, 0.16883116883116883, 0.24675324675324675, 0.2987012987012987, 0.33766233766233766], [0.0875, 0.1625, 0.2375, 0.3, 0.3375], [0.08139534883720931, 0.16279069767441862, 0.23255813953488372, 0.29069767441860467, 0.32558139534883723], [0.07865168539325842, 0.15730337078651685, 0.2247191011235955, 0.2808988764044944, 0.3146067415730337], [0.08333333333333333, 0.16666666666666666, 0.22916666666666666, 0.2916666666666667, 0.3333333333333333], [0.0891089108910891, 0.1782178217821782, 0.2376237623762376, 0.297029702970297, 0.33663366336633666], [0.10091743119266056, 0.1926605504587156, 0.25688073394495414, 0.3119266055045872, 0.3486238532110092], [0.11304347826086956, 0.2, 0.2608695652173913, 0.3130434782608696, 0.3565217391304348], [0.11965811965811966, 0.20512820512820512, 0.26495726495726496, 0.3162393162393162, 0.358974358974359]]
ranking_effectiveness_ambiguous_multi_sketch_euclidean= [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.125, 0.25, 0.25, 0.25], [0.05555555555555555, 0.1111111111111111, 0.2222222222222222, 0.2777777777777778, 0.2777777777777778], [0.07407407407407407, 0.14814814814814814, 0.2962962962962963, 0.3333333333333333, 0.3333333333333333], [0.06060606060606061, 0.12121212121212122, 0.24242424242424243, 0.30303030303030304, 0.30303030303030304], [0.05405405405405406, 0.13513513513513514, 0.24324324324324326, 0.32432432432432434, 0.32432432432432434], [0.041666666666666664, 0.10416666666666667, 0.20833333333333334, 0.2916666666666667, 0.2916666666666667], [0.05263157894736842, 0.10526315789473684, 0.19298245614035087, 0.2631578947368421, 0.2631578947368421], [0.046153846153846156, 0.1076923076923077, 0.18461538461538463, 0.26153846153846155, 0.27692307692307694], [0.05405405405405406, 0.10810810810810811, 0.1891891891891892, 0.2702702702702703, 0.28378378378378377], [0.05194805194805195, 0.1038961038961039, 0.19480519480519481, 0.2727272727272727, 0.2987012987012987], [0.05, 0.1, 0.1875, 0.2625, 0.2875], [0.05813953488372093, 0.10465116279069768, 0.18604651162790697, 0.2558139534883721, 0.29069767441860467], [0.056179775280898875, 0.10112359550561797, 0.1797752808988764, 0.25842696629213485, 0.29213483146067415], [0.07291666666666667, 0.11458333333333333, 0.19791666666666666, 0.2708333333333333, 0.3020833333333333], [0.06930693069306931, 0.10891089108910891, 0.19801980198019803, 0.26732673267326734, 0.297029702970297], [0.08256880733944955, 0.12844036697247707, 0.21100917431192662, 0.28440366972477066, 0.3211009174311927], [0.09565217391304348, 0.1391304347826087, 0.21739130434782608, 0.28695652173913044, 0.33043478260869563], [0.09401709401709402, 0.13675213675213677, 0.21367521367521367, 0.2905982905982906, 0.3333333333333333]]
combined_ranking_ambiguous_sketch_effectiveness=  [[0.0, 0.0, 0.0, 0.0, 0.0], [0.125, 0.125, 0.375, 0.375, 0.375], [0.2222222222222222, 0.2222222222222222, 0.3888888888888889, 0.3888888888888889, 0.4444444444444444], [0.2222222222222222, 0.25925925925925924, 0.4074074074074074, 0.4444444444444444, 0.5185185185185185], [0.18181818181818182, 0.21212121212121213, 0.36363636363636365, 0.3939393939393939, 0.45454545454545453], [0.1891891891891892, 0.21621621621621623, 0.35135135135135137, 0.40540540540540543, 0.4594594594594595], [0.16666666666666666, 0.22916666666666666, 0.3333333333333333, 0.4166666666666667, 0.5], [0.15789473684210525, 0.21052631578947367, 0.2982456140350877, 0.40350877192982454, 0.47368421052631576], [0.13846153846153847, 0.23076923076923078, 0.3076923076923077, 0.4, 0.49230769230769234], [0.13513513513513514, 0.21621621621621623, 0.2972972972972973, 0.3918918918918919, 0.47297297297297297], [0.12987012987012986, 0.22077922077922077, 0.2987012987012987, 0.4025974025974026, 0.4935064935064935], [0.125, 0.2125, 0.2875, 0.4, 0.5], [0.12790697674418605, 0.20930232558139536, 0.27906976744186046, 0.3953488372093023, 0.4883720930232558], [0.12359550561797752, 0.20224719101123595, 0.2696629213483146, 0.39325842696629215, 0.48314606741573035], [0.13541666666666666, 0.20833333333333334, 0.28125, 0.40625, 0.4895833333333333], [0.1485148514851485, 0.21782178217821782, 0.2871287128712871, 0.40594059405940597, 0.48514851485148514], [0.1651376146788991, 0.22935779816513763, 0.30275229357798167, 0.41284403669724773, 0.4954128440366973], [0.17391304347826086, 0.23478260869565218, 0.3130434782608696, 0.41739130434782606, 0.5043478260869565], [0.1794871794871795, 0.23931623931623933, 0.3162393162393162, 0.4188034188034188, 0.5042735042735043]]

combined_ranking_all_sketches_effectiveness=  [[0.25, 0.5, 0.5, 0.5, 0.5], [0.375, 0.625, 0.75, 0.75, 0.75], [0.4444444444444444, 0.6666666666666666, 0.7777777777777778, 0.7777777777777778, 0.8888888888888888], [0.5555555555555556, 0.7777777777777778, 0.8518518518518519, 0.8518518518518519, 0.9259259259259259], [0.5454545454545454, 0.7878787878787878, 0.8787878787878788, 0.8787878787878788, 0.9393939393939394], [0.5675675675675675, 0.7837837837837838, 0.8918918918918919, 0.8918918918918919, 0.9459459459459459], [0.5833333333333334, 0.7708333333333334, 0.8541666666666666, 0.875, 0.9583333333333334], [0.5964912280701754, 0.7894736842105263, 0.8596491228070176, 0.8771929824561403, 0.9473684210526315], [0.6153846153846154, 0.8, 0.8615384615384616, 0.8769230769230769, 0.9538461538461539], [0.6081081081081081, 0.7702702702702703, 0.8243243243243243, 0.8513513513513513, 0.9459459459459459], [0.6103896103896104, 0.7662337662337663, 0.8181818181818182, 0.8441558441558441, 0.948051948051948], [0.6125, 0.7625, 0.8125, 0.85, 0.95], [0.627906976744186, 0.7674418604651163, 0.813953488372093, 0.8604651162790697, 0.9534883720930233], [0.6404494382022472, 0.7752808988764045, 0.8202247191011236, 0.8651685393258427, 0.9550561797752809], [0.6458333333333334, 0.7916666666666666, 0.8333333333333334, 0.875, 0.9583333333333334], [0.6534653465346535, 0.7920792079207921, 0.8415841584158416, 0.8811881188118812, 0.9603960396039604], [0.6605504587155964, 0.7981651376146789, 0.8440366972477065, 0.8899082568807339, 0.963302752293578], [0.6521739130434783, 0.7913043478260869, 0.8434782608695652, 0.8869565217391304, 0.9652173913043478], [0.6581196581196581, 0.7948717948717948, 0.8461538461538461, 0.8888888888888888, 0.9658119658119658]]

############## entity/non-entity sketches

#plotting single sketch effectiveness values
fig1 = plt.figure()
plt.hold(True)
ranking_effectiveness_single_sketch=  [[0.25, 0.5, 0.5, 0.5, 0.5], [0.375, 0.625, 0.625, 0.625, 0.625], [0.2777777777777778, 0.5, 0.5555555555555556, 0.6111111111111112, 0.7222222222222222], [0.3333333333333333, 0.5185185185185185, 0.5555555555555556, 0.5925925925925926, 0.6666666666666666], [0.36363636363636365, 0.5757575757575758, 0.6060606060606061, 0.6363636363636364, 0.696969696969697], [0.40540540540540543, 0.5945945945945946, 0.6486486486486487, 0.6756756756756757, 0.7297297297297297], [0.4375, 0.625, 0.6666666666666666, 0.6875, 0.75], [0.45614035087719296, 0.6491228070175439, 0.6842105263157895, 0.7017543859649122, 0.7543859649122807], [0.46153846153846156, 0.6307692307692307, 0.676923076923077, 0.6923076923076923, 0.7384615384615385], [0.44594594594594594, 0.5945945945945946, 0.6351351351351351, 0.6621621621621622, 0.7162162162162162], [0.45454545454545453, 0.5974025974025974, 0.6363636363636364, 0.6623376623376623, 0.7142857142857143], [0.45, 0.5875, 0.625, 0.6625, 0.7125], [0.4418604651162791, 0.5697674418604651, 0.6046511627906976, 0.6511627906976745, 0.7093023255813954], [0.4606741573033708, 0.5842696629213483, 0.6179775280898876, 0.6629213483146067, 0.7191011235955056], [0.4375, 0.5729166666666666, 0.6041666666666666, 0.6458333333333334, 0.7083333333333334], [0.44554455445544555, 0.5742574257425742, 0.6039603960396039, 0.6435643564356436, 0.7128712871287128], [0.44036697247706424, 0.5688073394495413, 0.5963302752293578, 0.6422018348623854, 0.7064220183486238], [0.4260869565217391, 0.5565217391304348, 0.591304347826087, 0.6347826086956522, 0.7043478260869566], [0.42735042735042733, 0.5641025641025641, 0.5982905982905983, 0.6410256410256411, 0.7094017094017094]]
for array_index in range(0,19):
	array_to_plot= ranking_effectiveness_single_sketch[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with single entity/non-entity sketches')
plt.title('Ranking Function top-k percent effectiveness with single entity/non-entity sketches')
# plt.savefig('top-k-with-single-entity-non-entity-sketches.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
plt.savefig('top-k-percent-with-single-entity-non-entity-sketches.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
plt.show()


#plotting multi sketch cosine effectiveness values
fig1 = plt.figure()
plt.hold(True)
ranking_effectiveness_multi_sketch_cosine=  [[0.25, 0.25, 0.25, 0.25, 0.25], [0.375, 0.5, 0.5, 0.5, 0.5], [0.3333333333333333, 0.3888888888888889, 0.4444444444444444, 0.5555555555555556, 0.6111111111111112], [0.3333333333333333, 0.4074074074074074, 0.4444444444444444, 0.5555555555555556, 0.6666666666666666], [0.3333333333333333, 0.42424242424242425, 0.45454545454545453, 0.5757575757575758, 0.696969696969697], [0.32432432432432434, 0.40540540540540543, 0.4594594594594595, 0.5945945945945946, 0.7027027027027027], [0.3125, 0.4166666666666667, 0.4583333333333333, 0.625, 0.7291666666666666], [0.3333333333333333, 0.42105263157894735, 0.47368421052631576, 0.6140350877192983, 0.7368421052631579], [0.35384615384615387, 0.4307692307692308, 0.47692307692307695, 0.6153846153846154, 0.7230769230769231], [0.32432432432432434, 0.3918918918918919, 0.43243243243243246, 0.5540540540540541, 0.6891891891891891], [0.3116883116883117, 0.37662337662337664, 0.4155844155844156, 0.5454545454545454, 0.6753246753246753], [0.3125, 0.375, 0.4125, 0.5375, 0.6625], [0.3488372093023256, 0.4069767441860465, 0.4418604651162791, 0.5581395348837209, 0.6744186046511628], [0.34831460674157305, 0.4157303370786517, 0.449438202247191, 0.5617977528089888, 0.6741573033707865], [0.3541666666666667, 0.4375, 0.46875, 0.5729166666666666, 0.6770833333333334], [0.3465346534653465, 0.43564356435643564, 0.4752475247524752, 0.5841584158415841, 0.6831683168316832], [0.3394495412844037, 0.43119266055045874, 0.47706422018348627, 0.5871559633027523, 0.6788990825688074], [0.34782608695652173, 0.43478260869565216, 0.4782608695652174, 0.5826086956521739, 0.6782608695652174], [0.3418803418803419, 0.42735042735042733, 0.4700854700854701, 0.5811965811965812, 0.6752136752136753]]
for array_index in range(0,19):
	array_to_plot= ranking_effectiveness_multi_sketch_cosine[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with multiple entity/non-entity sketches (cosine)')
# plt.savefig('top-k-multiple-entity-non-entity-sketches-cosine.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with multiple entity/non-entity sketches (cosine)')
plt.savefig('top-k-percent-multiple-entity-non-entity-sketches-cosine.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()


#plotting multi sketch euclidean effectiveness values
fig1 = plt.figure()
plt.hold(True)
ranking_effectiveness_multi_sketch_euclidean=  [[0.25, 0.25, 0.25, 0.5, 0.5], [0.375, 0.5, 0.5, 0.625, 0.625], [0.3333333333333333, 0.4444444444444444, 0.4444444444444444, 0.6111111111111112, 0.6666666666666666], [0.3333333333333333, 0.4444444444444444, 0.48148148148148145, 0.6296296296296297, 0.7037037037037037], [0.36363636363636365, 0.45454545454545453, 0.48484848484848486, 0.6363636363636364, 0.7272727272727273], [0.35135135135135137, 0.43243243243243246, 0.4864864864864865, 0.6486486486486487, 0.7297297297297297], [0.3541666666666667, 0.4375, 0.4791666666666667, 0.6458333333333334, 0.75], [0.3684210526315789, 0.43859649122807015, 0.47368421052631576, 0.631578947368421, 0.7543859649122807], [0.38461538461538464, 0.4461538461538462, 0.47692307692307695, 0.6307692307692307, 0.7384615384615385], [0.35135135135135137, 0.40540540540540543, 0.43243243243243246, 0.5675675675675675, 0.7027027027027027], [0.33766233766233766, 0.38961038961038963, 0.4155844155844156, 0.5584415584415584, 0.6883116883116883], [0.3375, 0.3875, 0.4125, 0.55, 0.675], [0.37209302325581395, 0.4186046511627907, 0.4418604651162791, 0.5697674418604651, 0.686046511627907], [0.38202247191011235, 0.42696629213483145, 0.449438202247191, 0.5730337078651685, 0.6966292134831461], [0.3958333333333333, 0.4375, 0.46875, 0.5833333333333334, 0.6979166666666666], [0.38613861386138615, 0.43564356435643564, 0.48514851485148514, 0.594059405940594, 0.7029702970297029], [0.3761467889908257, 0.43119266055045874, 0.48623853211009177, 0.5963302752293578, 0.7064220183486238], [0.3826086956521739, 0.43478260869565216, 0.48695652173913045, 0.591304347826087, 0.7043478260869566], [0.37606837606837606, 0.42735042735042733, 0.47863247863247865, 0.5897435897435898, 0.7008547008547008]]
for array_index in range(0,19):
	array_to_plot= ranking_effectiveness_multi_sketch_euclidean[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with multiple entity/non-entity sketches (euclidean)')
# plt.savefig('top-k-multiple-entity-non-entity-sketches-euclidean.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with multiple entity/non-entity sketches (euclidean)')
plt.savefig('top-k-percent-multiple-entity-non-entity-sketches-euclidean.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()


#plotting combined sketching effectiveness values ent/non-ent sketches
fig1 = plt.figure()
plt.hold(True)
combined_ranking_effectiveness=  [[0.25, 0.5, 0.5, 0.5, 0.5], [0.375, 0.625, 0.625, 0.625, 0.625], [0.3333333333333333, 0.6111111111111112, 0.6666666666666666, 0.6666666666666666, 0.7777777777777778], [0.4444444444444444, 0.6666666666666666, 0.7037037037037037, 0.7037037037037037, 0.7777777777777778], [0.45454545454545453, 0.696969696969697, 0.7272727272727273, 0.7272727272727273, 0.8181818181818182], [0.4864864864864865, 0.7027027027027027, 0.7567567567567568, 0.7567567567567568, 0.8378378378378378], [0.5, 0.7083333333333334, 0.75, 0.7708333333333334, 0.8541666666666666], [0.5263157894736842, 0.7368421052631579, 0.7719298245614035, 0.7894736842105263, 0.8596491228070176], [0.5538461538461539, 0.7384615384615385, 0.7846153846153846, 0.8, 0.8615384615384616], [0.5405405405405406, 0.7027027027027027, 0.7432432432432432, 0.7702702702702703, 0.8513513513513513], [0.5454545454545454, 0.7012987012987013, 0.7402597402597403, 0.7662337662337663, 0.8441558441558441], [0.55, 0.7, 0.7375, 0.775, 0.85], [0.5697674418604651, 0.7093023255813954, 0.7441860465116279, 0.7906976744186046, 0.8604651162790697], [0.5842696629213483, 0.7191011235955056, 0.7528089887640449, 0.797752808988764, 0.8651685393258427], [0.59375, 0.7395833333333334, 0.7708333333333334, 0.8125, 0.875], [0.594059405940594, 0.7326732673267327, 0.7722772277227723, 0.8118811881188119, 0.8811881188118812], [0.5871559633027523, 0.7247706422018348, 0.7706422018348624, 0.8165137614678899, 0.8807339449541285], [0.5826086956521739, 0.7217391304347827, 0.7739130434782608, 0.8173913043478261, 0.8869565217391304], [0.5811965811965812, 0.7264957264957265, 0.7777777777777778, 0.8205128205128205, 0.8888888888888888]]
for array_index in range(0,19):
	array_to_plot= combined_ranking_effectiveness[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with a combination of sketches')
# plt.savefig('top-k-entity-non-entity-combined-sketching.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with a combination of sketches')
plt.savefig('top-k-percent-entity-non-entity-combined-sketching.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()

#plotting single sketch ambiguous effectiveness values
fig1 = plt.figure()
plt.hold(True)
ranking_effectiveness_ambiguous_single_sketch=  [[0.0, 0.0, 0.0, 0.0, 0.0], [0.125, 0.125, 0.25, 0.25, 0.25], [0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.3333333333333333, 0.3333333333333333], [0.1111111111111111, 0.14814814814814814, 0.2962962962962963, 0.37037037037037035, 0.4074074074074074], [0.09090909090909091, 0.12121212121212122, 0.24242424242424243, 0.3333333333333333, 0.36363636363636365], [0.10810810810810811, 0.13513513513513514, 0.24324324324324326, 0.32432432432432434, 0.3783783783783784], [0.10416666666666667, 0.14583333333333334, 0.22916666666666666, 0.3333333333333333, 0.4375], [0.10526315789473684, 0.14035087719298245, 0.21052631578947367, 0.3333333333333333, 0.42105263157894735], [0.09230769230769231, 0.13846153846153847, 0.2, 0.3384615384615385, 0.4307692307692308], [0.0945945945945946, 0.13513513513513514, 0.20270270270270271, 0.33783783783783783, 0.4189189189189189], [0.09090909090909091, 0.14285714285714285, 0.2077922077922078, 0.33766233766233766, 0.4155844155844156], [0.0875, 0.1375, 0.2, 0.325, 0.425], [0.08139534883720931, 0.13953488372093023, 0.19767441860465115, 0.32558139534883723, 0.4186046511627907], [0.07865168539325842, 0.1348314606741573, 0.19101123595505617, 0.3146067415730337, 0.4044943820224719], [0.08333333333333333, 0.14583333333333334, 0.19791666666666666, 0.3333333333333333, 0.4166666666666667], [0.09900990099009901, 0.15841584158415842, 0.2079207920792079, 0.33663366336633666, 0.4158415841584158], [0.11009174311926606, 0.1651376146788991, 0.21100917431192662, 0.3394495412844037, 0.42201834862385323], [0.12173913043478261, 0.17391304347826086, 0.22608695652173913, 0.34782608695652173, 0.43478260869565216], [0.11965811965811966, 0.17094017094017094, 0.23076923076923078, 0.3504273504273504, 0.4358974358974359]]
for array_index in range(0,19):
	array_to_plot= ranking_effectiveness_ambiguous_single_sketch[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with single ambiguous sketches')
# plt.savefig('top-k-with-single-ambiguous-sketches.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with single ambiguous sketches')
plt.savefig('top-k-percent-with-single-ambiguous-sketches.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()


#plotting multi sketch ambiguous cosine effectiveness values
fig1 = plt.figure()
plt.hold(True)
ranking_effectiveness_ambiguous_multi_sketch_cosine=  [[0.0, 0.0, 0.0, 0.0, 0.0], [0.125, 0.125, 0.25, 0.375, 0.375], [0.1111111111111111, 0.16666666666666666, 0.2222222222222222, 0.2777777777777778, 0.3333333333333333], [0.14814814814814814, 0.2222222222222222, 0.2962962962962963, 0.37037037037037035, 0.4444444444444444], [0.12121212121212122, 0.18181818181818182, 0.2727272727272727, 0.3333333333333333, 0.3939393939393939], [0.13513513513513514, 0.1891891891891892, 0.2702702702702703, 0.32432432432432434, 0.3783783783783784], [0.10416666666666667, 0.1875, 0.2708333333333333, 0.3333333333333333, 0.375], [0.10526315789473684, 0.17543859649122806, 0.24561403508771928, 0.2982456140350877, 0.3333333333333333], [0.09230769230769231, 0.16923076923076924, 0.24615384615384617, 0.2923076923076923, 0.3384615384615385], [0.0945945945945946, 0.16216216216216217, 0.24324324324324326, 0.28378378378378377, 0.32432432432432434], [0.09090909090909091, 0.16883116883116883, 0.24675324675324675, 0.2987012987012987, 0.33766233766233766], [0.0875, 0.1625, 0.2375, 0.3, 0.3375], [0.08139534883720931, 0.16279069767441862, 0.23255813953488372, 0.29069767441860467, 0.32558139534883723], [0.07865168539325842, 0.15730337078651685, 0.2247191011235955, 0.2808988764044944, 0.3146067415730337], [0.08333333333333333, 0.16666666666666666, 0.22916666666666666, 0.2916666666666667, 0.3333333333333333], [0.0891089108910891, 0.1782178217821782, 0.2376237623762376, 0.297029702970297, 0.33663366336633666], [0.10091743119266056, 0.1926605504587156, 0.25688073394495414, 0.3119266055045872, 0.3486238532110092], [0.11304347826086956, 0.2, 0.2608695652173913, 0.3130434782608696, 0.3565217391304348], [0.11965811965811966, 0.20512820512820512, 0.26495726495726496, 0.3162393162393162, 0.358974358974359]]
for array_index in range(0,19):
	array_to_plot= ranking_effectiveness_ambiguous_multi_sketch_cosine[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with multiple ambiguous sketches (cosine)')
# plt.savefig('top-k-multiple-ambiguous-sketches-cosine.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with multiple ambiguous sketches (cosine)')
plt.savefig('top-k-percent-multiple-ambiguous-sketches-cosine.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()


#plotting multi sketch ambiguous euclidean effectiveness values
fig1 = plt.figure()
plt.hold(True)
ranking_effectiveness_ambiguous_multi_sketch_euclidean=  [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.125, 0.25, 0.25, 0.25], [0.05555555555555555, 0.1111111111111111, 0.2222222222222222, 0.2777777777777778, 0.2777777777777778], [0.07407407407407407, 0.14814814814814814, 0.2962962962962963, 0.3333333333333333, 0.3333333333333333], [0.06060606060606061, 0.12121212121212122, 0.24242424242424243, 0.30303030303030304, 0.30303030303030304], [0.05405405405405406, 0.13513513513513514, 0.24324324324324326, 0.32432432432432434, 0.32432432432432434], [0.041666666666666664, 0.10416666666666667, 0.20833333333333334, 0.2916666666666667, 0.2916666666666667], [0.05263157894736842, 0.10526315789473684, 0.19298245614035087, 0.2631578947368421, 0.2631578947368421], [0.046153846153846156, 0.1076923076923077, 0.18461538461538463, 0.26153846153846155, 0.27692307692307694], [0.05405405405405406, 0.10810810810810811, 0.1891891891891892, 0.2702702702702703, 0.28378378378378377], [0.05194805194805195, 0.1038961038961039, 0.19480519480519481, 0.2727272727272727, 0.2987012987012987], [0.05, 0.1, 0.1875, 0.2625, 0.2875], [0.05813953488372093, 0.10465116279069768, 0.18604651162790697, 0.2558139534883721, 0.29069767441860467], [0.056179775280898875, 0.10112359550561797, 0.1797752808988764, 0.25842696629213485, 0.29213483146067415], [0.07291666666666667, 0.11458333333333333, 0.19791666666666666, 0.2708333333333333, 0.3020833333333333], [0.06930693069306931, 0.10891089108910891, 0.19801980198019803, 0.26732673267326734, 0.297029702970297], [0.08256880733944955, 0.12844036697247707, 0.21100917431192662, 0.28440366972477066, 0.3211009174311927], [0.09565217391304348, 0.1391304347826087, 0.21739130434782608, 0.28695652173913044, 0.33043478260869563], [0.09401709401709402, 0.13675213675213677, 0.21367521367521367, 0.2905982905982906, 0.3333333333333333]]
for array_index in range(0,19):
	array_to_plot= ranking_effectiveness_ambiguous_multi_sketch_euclidean[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with multiple ambiguous sketches (euclidean)')
# plt.savefig('top-k-multiple-ambiguous-sketches-euclidean.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with multiple ambiguous sketches (euclidean)')
plt.savefig('top-k-percent-multiple-ambiguous-sketches-euclidean.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()


#plotting combined sketching ambiguous effectiveness values
fig1 = plt.figure()
plt.hold(True)
combined_ranking_ambiguous_sketch_effectiveness= [[0.0, 0.0, 0.0, 0.0, 0.0], [0.125, 0.125, 0.375, 0.375, 0.375], [0.2222222222222222, 0.2222222222222222, 0.3888888888888889, 0.3888888888888889, 0.4444444444444444], [0.2222222222222222, 0.25925925925925924, 0.4074074074074074, 0.4444444444444444, 0.5185185185185185], [0.18181818181818182, 0.21212121212121213, 0.36363636363636365, 0.3939393939393939, 0.45454545454545453], [0.1891891891891892, 0.21621621621621623, 0.35135135135135137, 0.40540540540540543, 0.4594594594594595], [0.16666666666666666, 0.22916666666666666, 0.3333333333333333, 0.4166666666666667, 0.5], [0.15789473684210525, 0.21052631578947367, 0.2982456140350877, 0.40350877192982454, 0.47368421052631576], [0.13846153846153847, 0.23076923076923078, 0.3076923076923077, 0.4, 0.49230769230769234], [0.13513513513513514, 0.21621621621621623, 0.2972972972972973, 0.3918918918918919, 0.47297297297297297], [0.12987012987012986, 0.22077922077922077, 0.2987012987012987, 0.4025974025974026, 0.4935064935064935], [0.125, 0.2125, 0.2875, 0.4, 0.5], [0.12790697674418605, 0.20930232558139536, 0.27906976744186046, 0.3953488372093023, 0.4883720930232558], [0.12359550561797752, 0.20224719101123595, 0.2696629213483146, 0.39325842696629215, 0.48314606741573035], [0.13541666666666666, 0.20833333333333334, 0.28125, 0.40625, 0.4895833333333333], [0.1485148514851485, 0.21782178217821782, 0.2871287128712871, 0.40594059405940597, 0.48514851485148514], [0.1651376146788991, 0.22935779816513763, 0.30275229357798167, 0.41284403669724773, 0.4954128440366973], [0.17391304347826086, 0.23478260869565218, 0.3130434782608696, 0.41739130434782606, 0.5043478260869565], [0.1794871794871795, 0.23931623931623933, 0.3162393162393162, 0.4188034188034188, 0.5042735042735043]]
for array_index in range(0,19):
	array_to_plot= combined_ranking_ambiguous_sketch_effectiveness[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with a combination of ambiguous class sketches')
# plt.savefig('top-k-ambiguous-combined-sketching.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with a combination of ambiguous class sketches')
plt.savefig('top-k-percent-ambiguous-combined-sketching.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()


#plotting combined sketching effectiveness values
fig1 = plt.figure()
plt.hold(True)
combined_ranking_all_sketches_effectiveness=  [[0.25, 0.5, 0.5, 0.5, 0.5], [0.375, 0.625, 0.75, 0.75, 0.75], [0.4444444444444444, 0.6666666666666666, 0.7777777777777778, 0.7777777777777778, 0.8888888888888888], [0.5555555555555556, 0.7777777777777778, 0.8518518518518519, 0.8518518518518519, 0.9259259259259259], [0.5454545454545454, 0.7878787878787878, 0.8787878787878788, 0.8787878787878788, 0.9393939393939394], [0.5675675675675675, 0.7837837837837838, 0.8918918918918919, 0.8918918918918919, 0.9459459459459459], [0.5833333333333334, 0.7708333333333334, 0.8541666666666666, 0.875, 0.9583333333333334], [0.5964912280701754, 0.7894736842105263, 0.8596491228070176, 0.8771929824561403, 0.9473684210526315], [0.6153846153846154, 0.8, 0.8615384615384616, 0.8769230769230769, 0.9538461538461539], [0.6081081081081081, 0.7702702702702703, 0.8243243243243243, 0.8513513513513513, 0.9459459459459459], [0.6103896103896104, 0.7662337662337663, 0.8181818181818182, 0.8441558441558441, 0.948051948051948], [0.6125, 0.7625, 0.8125, 0.85, 0.95], [0.627906976744186, 0.7674418604651163, 0.813953488372093, 0.8604651162790697, 0.9534883720930233], [0.6404494382022472, 0.7752808988764045, 0.8202247191011236, 0.8651685393258427, 0.9550561797752809], [0.6458333333333334, 0.7916666666666666, 0.8333333333333334, 0.875, 0.9583333333333334], [0.6534653465346535, 0.7920792079207921, 0.8415841584158416, 0.8811881188118812, 0.9603960396039604], [0.6605504587155964, 0.7981651376146789, 0.8440366972477065, 0.8899082568807339, 0.963302752293578], [0.6521739130434783, 0.7913043478260869, 0.8434782608695652, 0.8869565217391304, 0.9652173913043478], [0.6581196581196581, 0.7948717948717948, 0.8461538461538461, 0.8888888888888888, 0.9658119658119658]]
for array_index in range(0,19):
	array_to_plot= combined_ranking_all_sketches_effectiveness[array_index]
	plt.plot(k_values,array_to_plot,label='batch '+str(array_index+1))
# plt.ylabel('ranking function top-k effectiveness')
plt.ylabel('ranking function top-k percent effectiveness')
plt.xlabel('k-value')
lgd=plt.legend(bbox_to_anchor=(1, 1), loc=9, prop={'size': 4}, borderaxespad=0.)

# plt.title('Ranking Function top-k effectiveness with a combination of sketches')
# plt.savefig('top-k-all-combined-sketching.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.title('Ranking Function top-k percent effectiveness with a combination of sketches')
plt.savefig('top-k-percent-all-combined-sketching.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

plt.show()
#------------------------------------------with sketching derived from ambiguous entity and non-entity classes----------------------------------


#------------------------------------------for eviction-----------------------------------------------------
eviction ranking effectiveness ent/non-ent single sketch:  [[0.8, 0.8, 0.8], [1.0, 1.0, 1.0], [0.9, 0.9333333333333333, 0.95], [1.0, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.9333333333333333, 0.95], [1.0, 1.0, 0.9], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0]]
eviction ranking effectiveness ent/non-ent multi sketch cosine:  [[0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 0.95], [1.0, 1.0, 1.0]]
eviction ranking effectiveness ent/non-ent multi sketch euclidean:  [[0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0]]
eviction ranking effectiveness ent/non-ent multi sketch combined:  [[0.5, 0.5333333333333333, 0.55], [0.5, 0.6666666666666666, 0.65], [0.6, 0.6, 0.7], [0.6, 0.5333333333333333, 0.65], [0.5, 0.5333333333333333, 0.6], [0.6, 0.4666666666666667, 0.5], [0.7, 0.5333333333333333, 0.65], [0.7, 0.5333333333333333, 0.55], [0.8, 0.8, 0.55], [0.6, 0.6, 0.55], [0.6, 0.5333333333333333, 0.5], [0.5, 0.5333333333333333, 0.55], [0.6, 0.5333333333333333, 0.55], [0.6, 0.6, 0.6], [0.6, 0.6, 0.6], [0.5, 0.5333333333333333, 0.55], [0.9, 0.9, 0.55], [0.9, 0.9, 0.9]]
eviction ranking effectiveness ambiguous single sketch:  [[0.9, 0.8666666666666667, 0.85], [0.7, 0.8, 0.85], [1.0, 0.9333333333333333, 0.95], [0.9, 0.8666666666666667, 0.9], [0.9, 0.8666666666666667, 0.9], [0.8, 0.8666666666666667, 0.9], [0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]
eviction ranking effectiveness ambiguous multi sketch cosine:  [[0.8, 0.8, 0.8], [0.7, 0.6666666666666666, 0.7], [0.9, 0.8666666666666667, 0.9], [0.7, 0.8, 0.85], [0.9, 0.8666666666666667, 0.9], [1.0, 0.8666666666666667, 0.9], [0.9, 0.8, 0.8], [0.9, 0.9333333333333333, 0.95], [0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 0.8666666666666667, 0.9], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.9, 0.9333333333333333, 0.95], [0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 0.95], [1.0, 1.0, 1.0]]
eviction ranking effectiveness ambiguous multi sketch euclidean:  [[0.9, 0.8666666666666667, 0.8], [0.6, 0.6666666666666666, 0.75], [0.9, 0.9333333333333333, 0.9], [0.8, 0.8, 0.85], [0.8, 0.8666666666666667, 0.9], [1.0, 0.8666666666666667, 0.9], [0.8, 0.8, 0.85], [0.9, 0.9333333333333333, 0.95], [1.0, 0.9333333333333333, 0.9], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.9, 0.8, 0.85], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.9, 0.9333333333333333, 0.95], [0.9, 0.9333333333333333, 0.95], [0.9, 0.9333333333333333, 0.95], [1.0, 1.0, 1.0]]
eviction ranking effectiveness ambiguous multi sketch combined:  [[0.4, 0.4666666666666667, 0.5], [0.2, 0.4, 0.5], [0.8, 0.6666666666666666, 0.7], [0.4, 0.6666666666666666, 0.6], [0.4, 0.5333333333333333, 0.6], [0.4, 0.4, 0.5], [0.2, 0.2, 0.3], [0.1, 0.2, 0.2], [0.2, 0.2, 0.15], [0.2, 0.26666666666666666, 0.35], [0.2, 0.26666666666666666, 0.35], [0.4, 0.3333333333333333, 0.45], [0.4, 0.4666666666666667, 0.5], [0.6, 0.5333333333333333, 0.5333333333333333], [0.4, 0.3333333333333333, 0.35], [0.4, 0.4666666666666667, 0.4], [0.4, 0.3333333333333333, 0.3], [0.5, 0.5, 0.3]]
eviction ranking effectiveness all sketch combined:  [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]











# def func(x,a,b1,b2):
# 	x1,x2=x
# 	return (a*np.exp(b1*x1+b2*x2))





#model function

# def func(x,a,b):
	
# 	return (a*np.exp(b*x))

# def func(x, a, b, c):
# 	# return a*np.exp(-b*x)+c
# 	return a*x**2 + b*x + c

# def residuals(coeffs,y,x):
# 	return y-func(x,coeffs[0],coeffs[1],coeffs[2])

# filename='entity-level-estimates-average.csv'
# data=pd.read_csv(filename,sep =',', index_col=False)
# fig, axes = plt.subplots(nrows=3, ncols=3, sharex=True, sharey=True, figsize=(20,20) )
# fig = plt.figure()
# ax = fig.gca(projection='3d')

# ax.set_xticks([0, 20, 1.0])
# ax.set_yticks([0, 20, 1.0])


# x_data=[]
# x0=[]
# x1=[]
# y_data=[]

# # for i, ax in enumerate(axes.flat, start=0):
# # 	print(i)
# for i in range(11):
# 	fig, ax = plt.subplots(nrows=1, ncols=1)
# 	ax.set_xticks(np.arange(0, 20, 1.0))
# 	x_val=list(range(i,20))
# 	#x_val_transformed=[j-i for j in x_val]
# 	x0_arr=[j-i for j in x_val]
# 	y_val=data[str(i)].tolist()[i:]
# 	# y_data.extend(y_val)
# 	#print(len(x_val),len(y_val[i:]))
# 	#y_val_norm=[(y_val[0]-i)/y_val[0] for i in y_val]
# 	#plt.plot(x_val,y_val_norm,label=str(i))
# 	x0_arr_truncated=x0_arr[:16]
# 	y_val_truncated=y_val[:16]
# 	# print(x0_arr,y_val)
# 	# print(len(x0_arr_truncated),len(y_val_truncated))
# 	# ax.scatter(x0_arr,y_val)
	
# 	# np_poly=np.polyfit(np.array(x0_arr), np.array(y_val), 3)
# 	# estimated_y = np.polyval(np_poly,np.array(x0_arr))
# 	np_poly=np.polyfit(np.array(x0_arr_truncated), np.array(y_val_truncated), 3)
# 	estimated_y = np.polyval(np_poly,np.array(x0_arr))
# 	print('predictions for batch '+str(i)+':')
# 	print(y_val)
# 	print(estimated_y)
	
	# p0=np.array([y_val[0],1e-4,1], dtype=float)
	# curve_fit_coeff,cov = curve_fit(func, np.array(x0_arr), np.array(y_val))
	# estimated_y=func(np.array(x0_arr),curve_fit_coeff[0],curve_fit_coeff[1],curve_fit_coeff[2])
	# print(cov)

	# res_lsq = least_squares(residuals, p0, args=(np.array(x0_arr), np.array(y_val)))
	# # print(res_lsq)
	# estimated_y=func(np.array(x0_arr),res_lsq.x[0],res_lsq.x[1],res_lsq.x[2])

	# res_robust = least_squares(residuals, p0, loss='soft_l1', f_scale=0.1, args=(np.array(x0_arr), np.array(y_val)))
	# # print(res_lsq)
	# estimated_y=func(np.array(x0_arr),res_robust.x[0],res_robust.x[1],res_robust.x[2])
	
	
	# print(estimated_y)
	# ax.plot(x0_arr,estimated_y)

	# ax.set_title("Propagation of Ambiguous Candidates from batch "+str(i))
	# ax.set_ylabel('# of ambiguous candidates remaining')
	# ax.set_xlabel('Current Batch')

	# plt.show()


# fig.tight_layout()

# plt.show()
	

	# plt.plot(x_val_transformed,y_val_norm,label=str(i))
# 	x0.extend(x0_arr)
# 	x1.extend(x_val)
# x_data=[x0,x1]
# x_data=np.array(x_data)

# coeff, cov=curve_fit(func, x_data,y_data)
# print(coeff)
# estimated_y=func(x_data,coeff[0],coeff[1],coeff[2])
# print(len(x_data[0]),len(x_data[1]),len(estimated_y))
# ax.scatter(x_data[0], x_data[1],estimated_y, alpha=0.2)


# ax.set_xlabel('Entry Batch')

# plt.title("Propagation of Ambiguous Candidates labeling through batches")
# plt.ylabel('# of ambiguous candidates labelled')
# plt.xlabel('Batches since entry')

# plt.legend()
# plt.show()
#----------------------------------plot code ends---------------------------------------------
# extenstion='.csv'
# sentence='sentence-level-estimates-'
# mention='mention-level-estimates-'
# entity='entity-level-estimates-'
# column_headers=['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19']
# # name=entity+str(0)+extenstion  # for entities
# name=mention+str(0)+extenstion # for mentions
# # name=sentence+str(0)+extenstion  # for sentences
# df_original=pd.read_csv(name,sep =',', index_col=False)
# averaged_data=pd.DataFrame(index=df_original.index,columns=df_original.columns)
# averaged_data = averaged_data.fillna(0)

# for iter in range(10):
# 	# name=entity+str(iter)+extenstion # for entities
# 	name=mention+str(iter)+extenstion # for mentions
# 	# name=sentence+str(iter)+extenstion # for sentences
# 	print(name)
# 	data=pd.read_csv(name,sep =',', index_col=False)
# 	averaged_data=averaged_data.add(data)
# averaged_data= averaged_data/10
# # averaged_data.to_csv(entity+'average'+extenstion) # for entities
# averaged_data.to_csv(mention+'average'+extenstion) # for mentions
# # averaged_data.to_csv(sentence+'average'+extenstion) # for sentences
#----------------------------------averaging code ends---------------------------------------------


# good= [275498,
# 270537,
# 270038,
# 270372,
# 269851,
# 270641,
# 269851,
# 270078,
# 270038,
# 270372]

# bad= [ 708783,
# 720784,
# 723066,
# 718229,
# 719500,
# 718229,
# 722636,
# 722836,
# 722836,
# 721364]

# ambiguous= [ 42873,
# 35833,
# 34050,
# 38553,
# 37803,
# 38284,
# 34667,
# 34240,
# 34280,
# 35418]

# incomplete=[34788,
# 35670,
# 34030,
# 38261,
# 37529,
# 38017,
# 34549,
# 34191,
# 34191,
# 35253]

# print('good: ',str(sum(good)/len(good)))
# print('bad: ',str(sum(bad)/len(bad)))
# print('ambiguous: ',str(sum(ambiguous)/len(ambiguous)))
# print('incomplete: ',str(sum(incomplete)/len(incomplete)))

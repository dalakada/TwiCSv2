from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.optimize import curve_fit
from scipy.optimize import leastsq,least_squares
import matplotlib.cm as mplcm
import matplotlib.colors as colors


# #EXPERIMENT 1: all reintroduction variants effectiveness

# k_values=[20,25,30,35,40,45,50,55]

# ranking_effectiveness_single_sketch=  [[0.5333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.7333333333333333, 0.8, 0.9333333333333333, 0.9333333333333333], [0.55, 0.7, 0.7, 0.7, 0.75, 0.8, 0.9, 0.9], [0.53125, 0.625, 0.625, 0.625, 0.71875, 0.75, 0.875, 0.875], [0.525, 0.625, 0.675, 0.675, 0.75, 0.8, 0.9, 0.9], [0.5161290322580645, 0.5967741935483871, 0.6612903225806451, 0.6935483870967742, 0.7580645161290323, 0.8064516129032258, 0.8709677419354839, 0.8870967741935484], [0.5061728395061729, 0.5802469135802469, 0.6296296296296297, 0.6666666666666666, 0.7283950617283951, 0.7654320987654321, 0.8271604938271605, 0.8641975308641975], [0.48333333333333334, 0.5583333333333333, 0.6083333333333333, 0.6583333333333333, 0.7416666666666667, 0.775, 0.825, 0.8583333333333333], [0.47586206896551725, 0.5448275862068965, 0.593103448275862, 0.6413793103448275, 0.7172413793103448, 0.7517241379310344, 0.8137931034482758, 0.8551724137931035], [0.4673913043478261, 0.532608695652174, 0.5869565217391305, 0.6358695652173914, 0.717391304347826, 0.7663043478260869, 0.8206521739130435, 0.8586956521739131], [0.45893719806763283, 0.5265700483091788, 0.5748792270531401, 0.6231884057971014, 0.7004830917874396, 0.7536231884057971, 0.8067632850241546, 0.8454106280193237], [0.46835443037974683, 0.5316455696202531, 0.5738396624472574, 0.6160337552742616, 0.70042194092827, 0.7552742616033755, 0.8016877637130801, 0.8438818565400844], [0.46179401993355484, 0.5249169435215947, 0.5681063122923588, 0.6013289036544851, 0.6810631229235881, 0.7408637873754153, 0.7873754152823921, 0.8272425249169435], [0.4657142857142857, 0.5257142857142857, 0.5628571428571428, 0.6028571428571429, 0.68, 0.7371428571428571, 0.7828571428571428, 0.82], [0.4593908629441624, 0.5152284263959391, 0.5532994923857868, 0.5939086294416244, 0.6675126903553299, 0.7284263959390863, 0.7715736040609137, 0.8071065989847716], [0.45454545454545453, 0.5086580086580087, 0.5541125541125541, 0.5952380952380952, 0.6688311688311688, 0.7251082251082251, 0.7619047619047619, 0.7987012987012987], [0.4389312977099237, 0.5, 0.5458015267175572, 0.5935114503816794, 0.6603053435114504, 0.7137404580152672, 0.7480916030534351, 0.7824427480916031], [0.42833052276559863, 0.4839797639123103, 0.5311973018549747, 0.581787521079258, 0.654300168634064, 0.7133220910623946, 0.7537942664418212, 0.7841483979763912], [0.4305555555555556, 0.48302469135802467, 0.5324074074074074, 0.5833333333333334, 0.6558641975308642, 0.7114197530864198, 0.7530864197530864, 0.7854938271604939], [0.4297752808988764, 0.4803370786516854, 0.5323033707865169, 0.5884831460674157, 0.6587078651685393, 0.7134831460674157, 0.7556179775280899, 0.7893258426966292], [0.4280104712041885, 0.47774869109947643, 0.5327225130890052, 0.587696335078534, 0.6570680628272252, 0.7133507853403142, 0.7578534031413613, 0.7918848167539267]]
# ranking_effectiveness_multi_sketch_cosine=  [[0.4, 0.5333333333333333, 0.6, 0.7333333333333333, 0.8, 0.8, 0.8, 0.8666666666666667], [0.4, 0.55, 0.65, 0.75, 0.8, 0.8, 0.8, 0.9], [0.4375, 0.625, 0.6875, 0.78125, 0.8125, 0.8125, 0.8125, 0.875], [0.45, 0.625, 0.675, 0.75, 0.8, 0.8, 0.825, 0.875], [0.41935483870967744, 0.5645161290322581, 0.6451612903225806, 0.7258064516129032, 0.7741935483870968, 0.7741935483870968, 0.8064516129032258, 0.8548387096774194], [0.37037037037037035, 0.5061728395061729, 0.6049382716049383, 0.6790123456790124, 0.7283950617283951, 0.7407407407407407, 0.7654320987654321, 0.8148148148148148], [0.38333333333333336, 0.5083333333333333, 0.5916666666666667, 0.6666666666666666, 0.7166666666666667, 0.75, 0.7916666666666666, 0.8333333333333334], [0.3931034482758621, 0.5103448275862069, 0.5862068965517241, 0.6551724137931034, 0.7103448275862069, 0.7379310344827587, 0.7793103448275862, 0.8137931034482758], [0.3804347826086957, 0.4891304347826087, 0.5652173913043478, 0.6358695652173914, 0.6793478260869565, 0.7228260869565217, 0.7717391304347826, 0.8206521739130435], [0.37681159420289856, 0.4782608695652174, 0.5555555555555556, 0.6280193236714976, 0.6714975845410628, 0.7101449275362319, 0.7632850241545893, 0.8115942028985508], [0.3670886075949367, 0.4767932489451477, 0.5569620253164557, 0.6244725738396625, 0.6624472573839663, 0.6962025316455697, 0.7552742616033755, 0.810126582278481], [0.3654485049833887, 0.4750830564784053, 0.5415282392026578, 0.6112956810631229, 0.6578073089700996, 0.6877076411960132, 0.7375415282392026, 0.7906976744186046], [0.3628571428571429, 0.4714285714285714, 0.5457142857142857, 0.6114285714285714, 0.6571428571428571, 0.6857142857142857, 0.7285714285714285, 0.7857142857142857], [0.3553299492385787, 0.46446700507614214, 0.5456852791878173, 0.6091370558375635, 0.6522842639593909, 0.682741116751269, 0.7258883248730964, 0.7791878172588832], [0.33766233766233766, 0.45021645021645024, 0.5324675324675324, 0.5995670995670995, 0.645021645021645, 0.6796536796536796, 0.7207792207792207, 0.7792207792207793], [0.32633587786259544, 0.44083969465648853, 0.5248091603053435, 0.5954198473282443, 0.6412213740458015, 0.6755725190839694, 0.7194656488549618, 0.7729007633587787], [0.32040472175379425, 0.433389544688027, 0.5177065767284992, 0.5885328836424958, 0.6340640809443507, 0.6661045531197302, 0.7099494097807757, 0.7655986509274874], [0.32253086419753085, 0.4351851851851852, 0.5231481481481481, 0.595679012345679, 0.6419753086419753, 0.6728395061728395, 0.7145061728395061, 0.7731481481481481], [0.3089887640449438, 0.42275280898876405, 0.5098314606741573, 0.5828651685393258, 0.6348314606741573, 0.6671348314606742, 0.7092696629213483, 0.7696629213483146], [0.30497382198952877, 0.4175392670157068, 0.5039267015706806, 0.5772251308900523, 0.6348167539267016, 0.6662303664921466, 0.7081151832460733, 0.7670157068062827]]
# ranking_effectiveness_multi_sketch_euclidean=  [[0.4, 0.5333333333333333, 0.6666666666666666, 0.7333333333333333, 0.8, 0.8, 0.8, 0.8666666666666667], [0.4, 0.55, 0.7, 0.75, 0.8, 0.8, 0.85, 0.9], [0.375, 0.5625, 0.71875, 0.78125, 0.8125, 0.8125, 0.84375, 0.875], [0.4, 0.575, 0.7, 0.75, 0.775, 0.825, 0.875, 0.9], [0.3870967741935484, 0.5483870967741935, 0.6774193548387096, 0.7258064516129032, 0.7580645161290323, 0.8064516129032258, 0.8387096774193549, 0.8870967741935484], [0.345679012345679, 0.48148148148148145, 0.6296296296296297, 0.6790123456790124, 0.7283950617283951, 0.7654320987654321, 0.7901234567901234, 0.8395061728395061], [0.35833333333333334, 0.49166666666666664, 0.6166666666666667, 0.6666666666666666, 0.725, 0.7666666666666667, 0.825, 0.8583333333333333], [0.3724137931034483, 0.496551724137931, 0.6068965517241379, 0.6620689655172414, 0.7172413793103448, 0.7517241379310344, 0.8068965517241379, 0.8413793103448276], [0.3532608695652174, 0.483695652173913, 0.5815217391304348, 0.6358695652173914, 0.6902173913043478, 0.7336956521739131, 0.7880434782608695, 0.842391304347826], [0.34782608695652173, 0.47342995169082125, 0.5700483091787439, 0.6280193236714976, 0.6811594202898551, 0.7246376811594203, 0.782608695652174, 0.8309178743961353], [0.350210970464135, 0.4767932489451477, 0.569620253164557, 0.6286919831223629, 0.6751054852320675, 0.7130801687763713, 0.7721518987341772, 0.8270042194092827], [0.3554817275747508, 0.4750830564784053, 0.5581395348837209, 0.6212624584717608, 0.6710963455149501, 0.7009966777408638, 0.7541528239202658, 0.8039867109634552], [0.3514285714285714, 0.4714285714285714, 0.56, 0.6228571428571429, 0.6657142857142857, 0.6942857142857143, 0.7457142857142857, 0.8], [0.3426395939086294, 0.46446700507614214, 0.5583756345177665, 0.6218274111675127, 0.6649746192893401, 0.6928934010152284, 0.7411167512690355, 0.7918781725888325], [0.33116883116883117, 0.45021645021645024, 0.5432900432900433, 0.6103896103896104, 0.6558441558441559, 0.6904761904761905, 0.7316017316017316, 0.79004329004329], [0.32061068702290074, 0.44274809160305345, 0.5362595419847328, 0.6068702290076335, 0.6526717557251909, 0.683206106870229, 0.7290076335877863, 0.7824427480916031], [0.31197301854974707, 0.43844856661045534, 0.5328836424957841, 0.6053962900505903, 0.6458684654300169, 0.6745362563237775, 0.718381112984823, 0.7723440134907251], [0.3132716049382716, 0.4398148148148148, 0.5401234567901234, 0.6141975308641975, 0.6527777777777778, 0.6805555555555556, 0.7222222222222222, 0.7777777777777778], [0.2991573033707865, 0.4297752808988764, 0.5280898876404494, 0.6025280898876404, 0.6446629213483146, 0.672752808988764, 0.7162921348314607, 0.773876404494382], [0.29581151832460734, 0.42670157068062825, 0.5235602094240838, 0.5981675392670157, 0.6426701570680629, 0.6714659685863874, 0.7146596858638743, 0.7709424083769634]]
# combined_ranking_effectiveness= [[0.6, 0.8, 0.8, 0.8, 0.8666666666666667, 0.9333333333333333, 1.0, 1.0], [0.65, 0.85, 0.85, 0.85, 0.9, 0.95, 1.0, 1.0], [0.71875, 0.84375, 0.84375, 0.84375, 0.90625, 0.9375, 1.0, 1.0], [0.7, 0.825, 0.85, 0.85, 0.9, 0.95, 1.0, 1.0], [0.6612903225806451, 0.7741935483870968, 0.8064516129032258, 0.8225806451612904, 0.8709677419354839, 0.9193548387096774, 0.9516129032258065, 0.967741935483871], [0.6172839506172839, 0.7283950617283951, 0.7654320987654321, 0.7777777777777778, 0.8148148148148148, 0.8518518518518519, 0.8888888888888888, 0.9382716049382716], [0.6, 0.7, 0.75, 0.775, 0.8416666666666667, 0.875, 0.9, 0.9416666666666667], [0.5862068965517241, 0.6827586206896552, 0.7310344827586207, 0.7586206896551724, 0.8137931034482758, 0.8482758620689655, 0.8896551724137931, 0.9379310344827586], [0.5597826086956522, 0.6467391304347826, 0.7065217391304348, 0.7391304347826086, 0.7989130434782609, 0.842391304347826, 0.8858695652173914, 0.9293478260869565], [0.5555555555555556, 0.642512077294686, 0.6956521739130435, 0.7294685990338164, 0.7874396135265701, 0.8309178743961353, 0.8743961352657005, 0.9178743961352657], [0.5611814345991561, 0.6413502109704642, 0.6919831223628692, 0.7215189873417721, 0.7890295358649789, 0.8312236286919831, 0.869198312236287, 0.9156118143459916], [0.5548172757475083, 0.6345514950166113, 0.6843853820598007, 0.707641196013289, 0.7740863787375415, 0.8239202657807309, 0.8637873754152824, 0.9069767441860465], [0.56, 0.6342857142857142, 0.68, 0.7114285714285714, 0.7771428571428571, 0.82, 0.86, 0.9], [0.565989847715736, 0.6370558375634517, 0.6852791878172588, 0.7157360406091371, 0.7741116751269036, 0.8197969543147208, 0.8578680203045685, 0.8959390862944162], [0.5714285714285714, 0.6385281385281385, 0.6926406926406926, 0.7229437229437229, 0.7792207792207793, 0.8225108225108225, 0.854978354978355, 0.8917748917748918], [0.5629770992366412, 0.6393129770992366, 0.6927480916030534, 0.7290076335877863, 0.7805343511450382, 0.8206106870229007, 0.8492366412213741, 0.8835877862595419], [0.5581787521079258, 0.6357504215851602, 0.688026981450253, 0.7268128161888702, 0.7807757166947723, 0.8229342327150084, 0.8566610455311973, 0.8870151770657673], [0.5709876543209876, 0.6435185185185185, 0.6944444444444444, 0.7330246913580247, 0.7870370370370371, 0.8271604938271605, 0.8626543209876543, 0.8950617283950617], [0.5688202247191011, 0.6390449438202247, 0.6924157303370787, 0.7331460674157303, 0.7865168539325843, 0.8258426966292135, 0.8623595505617978, 0.8960674157303371], [0.569371727748691, 0.6400523560209425, 0.693717277486911, 0.7329842931937173, 0.7853403141361257, 0.8272251308900523, 0.8664921465968587, 0.8992146596858639]]

# ranking_effectiveness_ambiguous_single_sketch=  [[0.2, 0.3333333333333333, 0.3333333333333333, 0.4666666666666667, 0.6, 0.6, 0.7333333333333333, 0.8], [0.15, 0.3, 0.4, 0.5, 0.65, 0.65, 0.75, 0.85], [0.21875, 0.34375, 0.40625, 0.46875, 0.59375, 0.65625, 0.75, 0.84375], [0.225, 0.375, 0.45, 0.5, 0.6, 0.675, 0.775, 0.85], [0.2903225806451613, 0.4032258064516129, 0.4838709677419355, 0.5161290322580645, 0.5967741935483871, 0.6612903225806451, 0.7741935483870968, 0.8709677419354839], [0.30864197530864196, 0.3950617283950617, 0.4691358024691358, 0.5185185185185185, 0.5925925925925926, 0.654320987654321, 0.7407407407407407, 0.8148148148148148], [0.26666666666666666, 0.35833333333333334, 0.45, 0.5, 0.5666666666666667, 0.6416666666666667, 0.7083333333333334, 0.7916666666666666], [0.2827586206896552, 0.3586206896551724, 0.4482758620689655, 0.503448275862069, 0.5655172413793104, 0.6344827586206897, 0.696551724137931, 0.7862068965517242], [0.25, 0.33695652173913043, 0.41304347826086957, 0.4673913043478261, 0.5271739130434783, 0.6032608695652174, 0.6684782608695652, 0.7554347826086957], [0.25120772946859904, 0.3285024154589372, 0.3961352657004831, 0.4444444444444444, 0.5072463768115942, 0.5797101449275363, 0.642512077294686, 0.7342995169082126], [0.26582278481012656, 0.34177215189873417, 0.4050632911392405, 0.45569620253164556, 0.5189873417721519, 0.5864978902953587, 0.6497890295358649, 0.7341772151898734], [0.2691029900332226, 0.34551495016611294, 0.4053156146179402, 0.4584717607973422, 0.5282392026578073, 0.5880398671096345, 0.6511627906976745, 0.7342192691029901], [0.26, 0.33714285714285713, 0.4085714285714286, 0.4657142857142857, 0.54, 0.6, 0.6571428571428571, 0.7314285714285714], [0.2639593908629442, 0.3350253807106599, 0.41116751269035534, 0.46954314720812185, 0.5406091370558376, 0.6015228426395939, 0.6598984771573604, 0.7309644670050761], [0.2597402597402597, 0.3333333333333333, 0.4134199134199134, 0.474025974025974, 0.5497835497835498, 0.6082251082251082, 0.6645021645021645, 0.7337662337662337], [0.2652671755725191, 0.33969465648854963, 0.4179389312977099, 0.48091603053435117, 0.5515267175572519, 0.6106870229007634, 0.6679389312977099, 0.7347328244274809], [0.26812816188870153, 0.3406408094435076, 0.41989881956155145, 0.4822934232715008, 0.551433389544688, 0.6138279932546374, 0.6677908937605397, 0.7335581787521079], [0.2654320987654321, 0.33487654320987653, 0.41512345679012347, 0.47685185185185186, 0.5493827160493827, 0.6172839506172839, 0.6743827160493827, 0.7422839506172839], [0.25842696629213485, 0.324438202247191, 0.4058988764044944, 0.47331460674157305, 0.547752808988764, 0.6137640449438202, 0.6713483146067416, 0.7387640449438202], [0.2591623036649215, 0.3298429319371728, 0.40706806282722513, 0.4725130890052356, 0.5458115183246073, 0.6099476439790575, 0.6701570680628273, 0.7342931937172775]]
# ranking_effectiveness_ambiguous_multi_sketch_cosine=  [[0.13333333333333333, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.3333333333333333, 0.4, 0.4666666666666667, 0.4666666666666667], [0.1, 0.25, 0.35, 0.35, 0.4, 0.45, 0.5, 0.5], [0.21875, 0.3125, 0.375, 0.375, 0.40625, 0.4375, 0.46875, 0.5], [0.225, 0.325, 0.375, 0.375, 0.4, 0.45, 0.5, 0.525], [0.27419354838709675, 0.3709677419354839, 0.43548387096774194, 0.43548387096774194, 0.46774193548387094, 0.5, 0.532258064516129, 0.5483870967741935], [0.2962962962962963, 0.38271604938271603, 0.4444444444444444, 0.4444444444444444, 0.48148148148148145, 0.5061728395061729, 0.5432098765432098, 0.5679012345679012], [0.26666666666666666, 0.35, 0.43333333333333335, 0.4583333333333333, 0.48333333333333334, 0.5, 0.5333333333333333, 0.5583333333333333], [0.2689655172413793, 0.3448275862068966, 0.42758620689655175, 0.4689655172413793, 0.4896551724137931, 0.503448275862069, 0.5379310344827586, 0.5724137931034483], [0.24456521739130435, 0.32608695652173914, 0.3967391304347826, 0.44565217391304346, 0.46195652173913043, 0.4782608695652174, 0.5163043478260869, 0.5489130434782609], [0.2463768115942029, 0.3188405797101449, 0.38164251207729466, 0.42995169082125606, 0.45410628019323673, 0.47342995169082125, 0.5072463768115942, 0.5362318840579711], [0.25738396624472576, 0.32489451476793246, 0.39662447257383965, 0.4472573839662447, 0.47257383966244726, 0.4936708860759494, 0.5232067510548524, 0.5569620253164557], [0.26245847176079734, 0.32558139534883723, 0.4019933554817276, 0.46179401993355484, 0.4850498338870432, 0.5083056478405316, 0.5348837209302325, 0.5647840531561462], [0.26, 0.32571428571428573, 0.40285714285714286, 0.46285714285714286, 0.49714285714285716, 0.5257142857142857, 0.5485714285714286, 0.5771428571428572], [0.2639593908629442, 0.32741116751269034, 0.4035532994923858, 0.467005076142132, 0.5, 0.5253807106598984, 0.5532994923857868, 0.5786802030456852], [0.2619047619047619, 0.329004329004329, 0.4069264069264069, 0.47186147186147187, 0.5064935064935064, 0.5346320346320347, 0.5627705627705628, 0.5887445887445888], [0.26908396946564883, 0.3377862595419847, 0.41603053435114506, 0.47900763358778625, 0.5095419847328244, 0.5343511450381679, 0.5648854961832062, 0.5896946564885496], [0.26644182124789206, 0.3406408094435076, 0.41989881956155145, 0.4772344013490725, 0.5092748735244519, 0.5328836424957841, 0.5632377740303541, 0.5885328836424958], [0.2638888888888889, 0.3395061728395062, 0.4182098765432099, 0.47530864197530864, 0.5077160493827161, 0.5324074074074074, 0.5601851851851852, 0.5848765432098766], [0.2556179775280899, 0.33146067415730335, 0.41292134831460675, 0.47331460674157305, 0.5028089887640449, 0.5280898876404494, 0.5561797752808989, 0.5814606741573034], [0.2604712041884817, 0.33507853403141363, 0.41492146596858637, 0.47513089005235604, 0.5026178010471204, 0.5274869109947644, 0.5536649214659686, 0.5785340314136126]]
# ranking_effectiveness_ambiguous_multi_sketch_euclidean= [[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.3333333333333333, 0.4, 0.4, 0.4666666666666667, 0.4666666666666667], [0.2, 0.25, 0.25, 0.3, 0.4, 0.45, 0.5, 0.5], [0.28125, 0.3125, 0.3125, 0.34375, 0.40625, 0.4375, 0.46875, 0.46875], [0.25, 0.275, 0.275, 0.325, 0.4, 0.45, 0.475, 0.475], [0.3064516129032258, 0.3387096774193548, 0.3387096774193548, 0.3870967741935484, 0.45161290322580644, 0.4838709677419355, 0.5, 0.5], [0.32098765432098764, 0.345679012345679, 0.345679012345679, 0.3950617283950617, 0.4691358024691358, 0.49382716049382713, 0.5185185185185185, 0.5185185185185185], [0.3, 0.35, 0.35, 0.39166666666666666, 0.45, 0.5, 0.5166666666666667, 0.5166666666666667], [0.3103448275862069, 0.3586206896551724, 0.3586206896551724, 0.4068965517241379, 0.45517241379310347, 0.496551724137931, 0.5172413793103449, 0.5241379310344828], [0.29347826086956524, 0.3423913043478261, 0.34782608695652173, 0.3967391304347826, 0.43478260869565216, 0.4782608695652174, 0.5, 0.5108695652173914], [0.2898550724637681, 0.3333333333333333, 0.33816425120772947, 0.38164251207729466, 0.42028985507246375, 0.46859903381642515, 0.48792270531400966, 0.4975845410628019], [0.3080168776371308, 0.3459915611814346, 0.35443037974683544, 0.4008438818565401, 0.4345991561181435, 0.4810126582278481, 0.5063291139240507, 0.5189873417721519], [0.30564784053156147, 0.34551495016611294, 0.36212624584717606, 0.4152823920265781, 0.45182724252491696, 0.4950166112956811, 0.5182724252491694, 0.5348837209302325], [0.29714285714285715, 0.3485714285714286, 0.3628571428571429, 0.4142857142857143, 0.46, 0.5057142857142857, 0.5371428571428571, 0.5542857142857143], [0.29949238578680204, 0.3477157360406091, 0.3629441624365482, 0.4137055837563452, 0.4593908629441624, 0.5076142131979695, 0.5380710659898477, 0.5583756345177665], [0.2943722943722944, 0.341991341991342, 0.3658008658008658, 0.4199134199134199, 0.46320346320346323, 0.512987012987013, 0.5454545454545454, 0.5735930735930735], [0.29770992366412213, 0.34541984732824427, 0.37213740458015265, 0.4312977099236641, 0.4713740458015267, 0.5152671755725191, 0.5458015267175572, 0.5744274809160306], [0.30016863406408095, 0.3490725126475548, 0.37436762225969644, 0.4317032040472175, 0.47217537942664417, 0.5143338954468802, 0.5446880269814502, 0.5750421585160203], [0.2916666666666667, 0.3441358024691358, 0.37191358024691357, 0.42901234567901236, 0.4691358024691358, 0.5092592592592593, 0.5416666666666666, 0.5709876543209876], [0.2808988764044944, 0.33146067415730335, 0.36235955056179775, 0.4199438202247191, 0.46207865168539325, 0.5028089887640449, 0.5365168539325843, 0.5674157303370787], [0.2801047120418848, 0.3298429319371728, 0.36387434554973824, 0.418848167539267, 0.4607329842931937, 0.5026178010471204, 0.5353403141361257, 0.5641361256544503]]
# combined_ranking_ambiguous_sketch_effectiveness=  [[0.26666666666666666, 0.3333333333333333, 0.3333333333333333, 0.4666666666666667, 0.6, 0.6, 0.7333333333333333, 0.8], [0.2, 0.3, 0.4, 0.5, 0.65, 0.65, 0.75, 0.85], [0.28125, 0.34375, 0.40625, 0.46875, 0.59375, 0.65625, 0.75, 0.84375], [0.3, 0.4, 0.45, 0.5, 0.6, 0.675, 0.775, 0.85], [0.3548387096774194, 0.43548387096774194, 0.5, 0.532258064516129, 0.5967741935483871, 0.6612903225806451, 0.7741935483870968, 0.8709677419354839], [0.37037037037037035, 0.4444444444444444, 0.49382716049382713, 0.5308641975308642, 0.5925925925925926, 0.654320987654321, 0.7530864197530864, 0.8395061728395061], [0.35, 0.43333333333333335, 0.48333333333333334, 0.525, 0.5666666666666667, 0.6416666666666667, 0.7166666666666667, 0.8083333333333333], [0.3586206896551724, 0.42758620689655175, 0.47586206896551725, 0.5241379310344828, 0.5655172413793104, 0.6344827586206897, 0.7034482758620689, 0.8], [0.33695652173913043, 0.4076086956521739, 0.44565217391304346, 0.4945652173913043, 0.5271739130434783, 0.6032608695652174, 0.6793478260869565, 0.7717391304347826], [0.3285024154589372, 0.391304347826087, 0.4251207729468599, 0.47342995169082125, 0.5120772946859904, 0.5845410628019324, 0.6521739130434783, 0.748792270531401], [0.34177215189873417, 0.4008438818565401, 0.4430379746835443, 0.48945147679324896, 0.5232067510548524, 0.5907172995780591, 0.6582278481012658, 0.7510548523206751], [0.3488372093023256, 0.4053156146179402, 0.45182724252491696, 0.4983388704318937, 0.53156146179402, 0.5913621262458472, 0.6578073089700996, 0.7508305647840532], [0.3485714285714286, 0.4085714285714286, 0.4542857142857143, 0.5057142857142857, 0.5457142857142857, 0.6028571428571429, 0.6628571428571428, 0.7485714285714286], [0.3477157360406091, 0.4035532994923858, 0.4543147208121827, 0.5101522842639594, 0.5456852791878173, 0.6040609137055838, 0.6649746192893401, 0.7461928934010152], [0.3463203463203463, 0.40476190476190477, 0.4588744588744589, 0.5173160173160173, 0.5562770562770563, 0.6125541125541125, 0.6753246753246753, 0.7532467532467533], [0.3549618320610687, 0.41030534351145037, 0.46564885496183206, 0.5209923664122137, 0.5572519083969466, 0.6145038167938931, 0.6812977099236641, 0.7557251908396947], [0.357504215851602, 0.4131534569983137, 0.4654300168634064, 0.5193929173693086, 0.5581787521079258, 0.6172006745362564, 0.6812816188870152, 0.7554806070826307], [0.3533950617283951, 0.4074074074074074, 0.46141975308641975, 0.5154320987654321, 0.5570987654320988, 0.6203703703703703, 0.6867283950617284, 0.7623456790123457], [0.34269662921348315, 0.398876404494382, 0.4550561797752809, 0.5112359550561798, 0.5561797752808989, 0.6179775280898876, 0.6839887640449438, 0.7598314606741573], [0.3468586387434555, 0.3992146596858639, 0.45418848167539266, 0.5117801047120419, 0.5536649214659686, 0.6138743455497382, 0.6819371727748691, 0.7539267015706806]]

# combined_ranking_all_sketches_effectiveness=  [[0.6666666666666666, 0.8, 0.8, 0.8, 0.9333333333333333, 0.9333333333333333, 1.0, 1.0], [0.7, 0.85, 0.85, 0.85, 0.95, 0.95, 1.0, 1.0], [0.75, 0.84375, 0.84375, 0.84375, 0.9375, 0.9375, 1.0, 1.0], [0.725, 0.85, 0.85, 0.85, 0.925, 0.95, 1.0, 1.0], [0.7419354838709677, 0.8225806451612904, 0.8548387096774194, 0.8709677419354839, 0.9354838709677419, 0.967741935483871, 1.0, 1.0], [0.7037037037037037, 0.7777777777777778, 0.8024691358024691, 0.8148148148148148, 0.8641975308641975, 0.8888888888888888, 0.9382716049382716, 0.9753086419753086], [0.6833333333333333, 0.75, 0.7833333333333333, 0.8, 0.875, 0.9, 0.9333333333333333, 0.9666666666666667], [0.6620689655172414, 0.7310344827586207, 0.7586206896551724, 0.7793103448275862, 0.8413793103448276, 0.8689655172413793, 0.9172413793103448, 0.9586206896551724], [0.6304347826086957, 0.7065217391304348, 0.7445652173913043, 0.7663043478260869, 0.8260869565217391, 0.8641304347826086, 0.9130434782608695, 0.9510869565217391], [0.6231884057971014, 0.7004830917874396, 0.7342995169082126, 0.7584541062801933, 0.8164251207729468, 0.855072463768116, 0.9033816425120773, 0.9420289855072463], [0.6329113924050633, 0.7088607594936709, 0.7426160337552743, 0.7637130801687764, 0.8227848101265823, 0.8565400843881856, 0.8987341772151899, 0.9451476793248945], [0.6312292358803987, 0.7009966777408638, 0.7375415282392026, 0.7541528239202658, 0.8106312292358804, 0.8504983388704319, 0.893687707641196, 0.9401993355481728], [0.64, 0.7028571428571428, 0.74, 0.7628571428571429, 0.8142857142857143, 0.8485714285714285, 0.8885714285714286, 0.9342857142857143], [0.6472081218274112, 0.7081218274111675, 0.7461928934010152, 0.7715736040609137, 0.817258883248731, 0.8527918781725888, 0.8908629441624365, 0.934010152284264], [0.6558441558441559, 0.7186147186147186, 0.7554112554112554, 0.7813852813852814, 0.8268398268398268, 0.8614718614718615, 0.8982683982683982, 0.9393939393939394], [0.6564885496183206, 0.7194656488549618, 0.7557251908396947, 0.7862595419847328, 0.8282442748091603, 0.8606870229007634, 0.8969465648854962, 0.9351145038167938], [0.6509274873524452, 0.7133220910623946, 0.7521079258010118, 0.7841483979763912, 0.8263069139966274, 0.8617200674536256, 0.9021922428330523, 0.9376053962900506], [0.6558641975308642, 0.7145061728395061, 0.7530864197530864, 0.7854938271604939, 0.8287037037037037, 0.8626543209876543, 0.904320987654321, 0.9429012345679012], [0.6544943820224719, 0.7134831460674157, 0.7570224719101124, 0.7893258426966292, 0.8300561797752809, 0.8609550561797753, 0.9030898876404494, 0.9438202247191011], [0.6570680628272252, 0.7146596858638743, 0.7578534031413613, 0.7892670157068062, 0.8298429319371727, 0.8612565445026178, 0.9044502617801047, 0.943717277486911]]

# reintroduction_effectiveness_batch_specific_top_k=  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9833887043189369, 0.9742857142857143, 0.9720812182741116, 0.974025974025974, 0.9751908396946565, 0.9713322091062394, 0.970679012345679, 0.9719101123595506, 0.9672774869109948]

# batch_value=1
# batch_arr=[]

# arr1=[]
# arr2=[]
# arr3=[]
# arr4=[]
# arr5=[]
# arr6=[]
# arr7=[]
# arr8=[]
# arr9=[]


# for elem in range(len(ranking_effectiveness_single_sketch)):
# 	batch_value+=1
# 	batch_arr.append(batch_value)

# 	arr1.append(ranking_effectiveness_single_sketch[elem][-1])
# 	arr2.append(ranking_effectiveness_multi_sketch_cosine[elem][-1])
# 	arr3.append(ranking_effectiveness_multi_sketch_euclidean[elem][-1])
# 	arr4.append(combined_ranking_effectiveness[elem][-1])

# 	arr5.append(ranking_effectiveness_ambiguous_single_sketch[elem][-1])
# 	arr6.append(ranking_effectiveness_ambiguous_multi_sketch_cosine[elem][-1])
# 	arr7.append(ranking_effectiveness_ambiguous_multi_sketch_euclidean[elem][-1])
# 	arr8.append(combined_ranking_ambiguous_sketch_effectiveness[elem][-1])

# 	arr9.append(combined_ranking_all_sketches_effectiveness[elem][-1])

# print(batch_arr)
# print(arr1)
# print(arr2)
# print(arr3)
# print(arr4)
# print(arr5)
# print(arr6)
# print(arr7)
# print(arr8)
# print(arr9)


# fig1 = plt.figure()
# plt.hold(True)
# plt.xticks(np.arange(2, 22, 1.0))

# plt.plot(batch_arr, arr1,'r--', label='single sketch, entity/non-entity')
# plt.plot(batch_arr, arr2,'b--', label='multi sketch, cosine, entity/non-entity')
# plt.plot(batch_arr, arr3,'g--', label='multi sketch, euclidean, entity/non-entity')
# plt.plot(batch_arr, arr4,'k--', label='combined sketch, entity/non-entity')

# plt.plot(batch_arr, arr5,'r:', label='single sketch, ambiguous')
# plt.plot(batch_arr, arr6,'b:', label='multi sketch, cosine, ambiguous')
# plt.plot(batch_arr, arr7,'g:', label='multi sketch, euclidean, ambiguous')
# plt.plot(batch_arr, arr8,'k:', label='combined sketch, ambiguous')

# plt.plot(batch_arr, arr9,'k+', label='combined all sketches')
# plt.plot(batch_arr, reintroduction_effectiveness_batch_specific_top_k,'b-', label='batch-specific')

# plt.ylabel('Candidate Disambiguation Recall')
# plt.xlabel('# of batches since start of stream')
# lgd=plt.legend(bbox_to_anchor=(1.15,0.65), loc=9, prop={'size': 4}, borderaxespad=0.)

# # plt.title('Efficiency speed-up with Reintroduction')
# # plt.savefig('efficiency-speed-up-with-reintroduction.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

# plt.title('Candidate disambiguation recall with different Reintroduction strategies')
# plt.savefig('candidate-disambiguation-recall-with-reintroduction.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

# plt.show()




# #EXPERIMENT 2: reintroduction threshold for global variants experiment

# fig1 = plt.figure()
# plt.hold(True)
# plt.xticks(np.arange(20, 120, 20.0))

# reintroduction_threshold_arr=[20,40,60,80,100]

# colours=['r','b','g','k','y']

# line_style_patterns=[':','-.','--','-','+']

# # combined_ranking_all_sketches_effectiveness_old= [[0.36363636363636365, 0.8181818181818182, 1.0, 1.0, 1.0], [0.4117647058823529, 0.8235294117647058, 1.0, 1.0, 1.0], [0.5806451612903226, 0.8387096774193549, 1.0, 1.0, 1.0], [0.55, 0.825, 1.0, 1.0, 1.0], [0.6129032258064516, 0.8387096774193549, 1.0, 1.0, 1.0], [0.6265060240963856, 0.8192771084337349, 0.9879518072289156, 1.0, 1.0], [0.631578947368421, 0.8333333333333334, 0.9912280701754386, 1.0, 1.0], [0.6068965517241379, 0.8068965517241379, 0.9862068965517241, 1.0, 1.0], [0.6022099447513812, 0.7955801104972375, 0.9834254143646409, 1.0, 1.0], [0.5951219512195122, 0.7853658536585366, 0.975609756097561, 1.0, 1.0], [0.6041666666666666, 0.7791666666666667, 0.975, 1.0, 1.0], [0.6066666666666667, 0.7766666666666666, 0.9733333333333334, 1.0, 1.0], [0.6264367816091954, 0.7873563218390804, 0.9741379310344828, 1.0, 1.0], [0.630272952853598, 0.7965260545905707, 0.9776674937965261, 1.0, 1.0], [0.6382978723404256, 0.8063829787234043, 0.9787234042553191, 1.0, 1.0], [0.6384180790960452, 0.8060263653483992, 0.9698681732580038, 1.0, 1.0], [0.6389351081530782, 0.8069883527454242, 0.9717138103161398, 1.0, 1.0], [0.6435045317220544, 0.8111782477341389, 0.972809667673716, 1.0, 1.0], [0.6508379888268156, 0.8212290502793296, 0.9748603351955307, 1.0, 1.0], [0.6529032258064517, 0.8206451612903226, 0.9754838709677419, 1.0, 1.0]]
# combined_ranking_all_sketches_effectiveness= [[0.2727272727272727, 0.9090909090909091, 1.0, 1.0, 1.0], [0.5, 0.9166666666666666, 1.0, 1.0, 1.0], [0.5588235294117647, 0.9117647058823529, 1.0, 1.0, 1.0], [0.5681818181818182, 0.9090909090909091, 1.0, 1.0, 1.0], [0.6081081081081081, 0.9054054054054054, 1.0, 1.0, 1.0], [0.6263736263736264, 0.9120879120879121, 1.0, 1.0, 1.0], [0.680327868852459, 0.9180327868852459, 1.0, 1.0, 1.0], [0.6845637583892618, 0.9060402684563759, 1.0, 1.0, 1.0], [0.6839378238341969, 0.9015544041450777, 1.0, 1.0, 1.0], [0.6774193548387096, 0.8940092165898618, 1.0, 1.0, 1.0], [0.689922480620155, 0.8992248062015504, 1.0, 1.0, 1.0], [0.6910828025477707, 0.8949044585987261, 1.0, 1.0, 1.0], [0.7016129032258065, 0.8978494623655914, 1.0, 1.0, 1.0], [0.7102803738317757, 0.8995327102803738, 1.0, 1.0, 1.0], [0.7025948103792415, 0.8962075848303394, 1.0, 1.0, 1.0], [0.6982456140350877, 0.8912280701754386, 1.0, 1.0, 1.0], [0.702660406885759, 0.8951486697965572, 1.0, 1.0, 1.0], [0.7012987012987013, 0.898989898989899, 1.0, 1.0, 1.0], [0.7059602649006622, 0.9033112582781457, 1.0, 1.0, 1.0], [0.7058096415327565, 0.9060568603213844, 1.0, 1.0, 1.0]]
# for index in range(len(combined_ranking_all_sketches_effectiveness)):
# 	colour_string=colours[int(index/5)]
# 	pattern_string=line_style_patterns[int(index%5)]

# 	plt.plot(reintroduction_threshold_arr,combined_ranking_all_sketches_effectiveness[index],colour_string+pattern_string, label='batch '+str(index))

# plt.ylabel('Candidate Disambiguation Recall')
# plt.xlabel('percent reintroduction threshold value')
# lgd=plt.legend(bbox_to_anchor=(1.1,1.01), loc=9, prop={'size': 6}, borderaxespad=0.)
# plt.setp(plt.gca().get_legend().get_texts(), fontsize='12')

# plt.title('Disambiguation Effectiveness for combined sketch based\n ranking with different Reintroduction Thresholds')
# plt.savefig('candidate-disambiguation-recall-reintroduction-threshold.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

# plt.show()



# #EXPERIMENT 3: eviction threshold for global variants experiment

# fig1 = plt.figure()
# plt.hold(True)


# eviction_threshold_arr=[10,15,20,25,30,35,40]

# colours=['r','b','g','k','y']

# line_style_patterns=[':','-.','--','-','+']

# combined_ranking_all_sketches_effectiveness= [[1.0, 1.0, 0.9285714285714286, 0.9411764705882353, 0.9523809523809523, 0.9583333333333334, 0.9642857142857143], 
# 												[0.9, 0.9333333333333333, 0.9, 0.92, 0.9333333333333333, 0.9428571428571428, 0.95], 
# 												[0.9230769230769231, 0.9, 0.9259259259259259, 0.9411764705882353, 0.95, 0.9361702127659575, 0.9444444444444444], 
# 												[1.0, 1.0, 1.0, 1.0, 0.9818181818181818, 0.96875, 0.958904109589041], 
# 												[1.0, 1.0, 0.9767441860465116, 0.9814814814814815, 0.9846153846153847, 0.9736842105263158, 0.9770114942528736], 
# 												[0.9642857142857143, 0.9761904761904762, 0.9107142857142857, 0.9285714285714286, 0.9285714285714286, 0.9387755102040817, 0.9464285714285714], 
# 												[1.0, 0.9583333333333334, 0.9375, 0.9506172839506173, 0.9587628865979382, 0.9646017699115044, 0.9534883720930233], 
# 												[0.972972972972973, 0.9464285714285714, 0.9333333333333333, 0.9139784946236559, 0.9196428571428571, 0.9236641221374046, 0.9333333333333333], 
# 												[1.0, 0.9682539682539683, 0.9523809523809523, 0.9523809523809523, 0.9523809523809523, 0.9523809523809523, 0.9464285714285714], 
# 												[0.9534883720930233, 0.9384615384615385, 0.9080459770114943, 0.9174311926605505, 0.9230769230769231, 0.9276315789473685, 0.9367816091954023], 
# 												[0.9361702127659575, 0.9436619718309859, 0.925531914893617, 0.923728813559322, 0.9366197183098591, 0.9454545454545454, 0.9417989417989417], 
# 												[0.9615384615384616, 0.9615384615384616, 0.9423076923076923, 0.9541984732824428, 0.9554140127388535, 0.9562841530054644, 0.9569377990430622], 
# 												[0.9508196721311475, 0.9565217391304348, 0.9512195121951219, 0.9285714285714286, 0.9405405405405406, 0.9395348837209302, 0.9471544715447154], 
# 												[0.9705882352941176, 0.9705882352941176, 0.9562043795620438, 0.9473684210526315, 0.9463414634146341, 0.95, 0.948905109489051], 
# 												[0.961038961038961, 0.9568965517241379, 0.9483870967741935, 0.9533678756476683, 0.9396551724137931, 0.9372693726937269, 0.9451612903225807], 
# 												[0.9629629629629629, 0.9508196721311475, 0.950920245398773, 0.9509803921568627, 0.9428571428571428, 0.9473684210526315, 0.950920245398773], 
# 												[0.9518072289156626, 0.968, 0.9700598802395209, 0.9665071770334929, 0.9641434262948207, 0.9590443686006825, 0.9641791044776119], 
# 												[0.9772727272727273, 0.9621212121212122, 0.9602272727272727, 0.9636363636363636, 0.9621212121212122, 0.9642857142857143, 0.9630681818181818], 
# 												[0.967391304347826, 0.9710144927536232, 0.9621621621621622, 0.948051948051948, 0.9458483754512635, 0.9506172839506173, 0.9567567567567568]]
# print(len(combined_ranking_all_sketches_effectiveness))

# for index in range(len(combined_ranking_all_sketches_effectiveness)):
# 	colour_string=colours[int(index/5)]
# 	pattern_string=line_style_patterns[int(index%5)]

# 	plt.plot(eviction_threshold_arr,combined_ranking_all_sketches_effectiveness[index],colour_string+pattern_string, label='batch '+str(index+2))

# plt.ylabel('Ranking precision\n (bottom ranked candidates remaining ambiguous)')
# plt.xlabel('percent eviction threshold value')
# plt.xticks(np.arange(10, 45, 5.0))
# plt. yticks(np.arange(0.6, 1, step=0.1))
# lgd=plt.legend(bbox_to_anchor=(0.5,0.5), ncol=4, loc=9, prop={'size': 6}, borderaxespad=0.)
# plt.setp(plt.gca().get_legend().get_texts(), fontsize='12')

# plt.title('Ranking Effectiveness for combined sketch based\n ranking with different Eviction Thresholds')
# plt.savefig('ranking-precision-eviction-threshold.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')

# plt.show()




#EXPERIMENT 4: performance estimates for reintroduction thresholds: EMD F1, Tweet completion histograms

# fig1 = plt.figure()
# plt.hold(True)

#110--> dynamic, 120--> baseline
# reintroduction_threshold_arr=[0,20,40,60,80,100,110,120,130]
# tweets= [84152, 173400, 265842, 350484, 439043, 527834, 607569, 682913, 760389, 849446, 942989, 1028661, 1113457, 1188145, 1263202, 1338782, 1419378, 1500195, 1578692, 1657711, 1713105]
# converted_tweets= [[79807, 162782, 242860, 322448, 405061, 488099, 549107, 615404, 688406, 770897, 861562, 942880, 1021344, 1088441, 1155982, 1225024, 1299338, 1374292, 1445521, 1517680, 1568008],
# [79807, 163393, 243489, 323128, 405964, 489225, 550323, 624067, 697427, 780103, 871136, 952526, 1031411, 1098853, 1166658, 1236123, 1310542, 1385701, 1457121, 1529441, 1579847],
# [79807, 163393, 243510, 330917, 413769, 497501, 558847, 633582, 707155, 790081, 881489, 963302, 1042334, 1110141, 1178264, 1248370, 1324075, 1399584, 1471579, 1544401, 1595431],
# [79807, 163630, 243764, 331878, 414747, 498513, 559863, 634591, 708384, 791452, 882937, 964772, 1044513, 1112777, 1181400, 1253701, 1329840, 1405522, 1478945, 1552171, 1603281],
# [79807, 163927, 244070, 332124, 415008, 500260, 562601, 637576, 711472, 795360, 888019, 969981, 1050194, 1118786, 1187731, 1260668, 1336952, 1413345, 1487383, 1560830, 1612026],
# [79807, 164092, 244413, 332475, 415358, 500690, 563038, 638106, 712482, 796947, 889651, 971810, 1053242, 1122638, 1191600, 1264588, 1341056, 1417804, 1491966, 1565416, 1619039],
# [79807, 164092, 244413, 332475, 415358, 500690, 563038, 638106, 712482, 796947, 888577, 970736, 1051265, 1120659, 1189621, 1262584, 1339050, 1415732, 1489894, 1563344, 1616824]]
# #120--> baseline same as 100, Ritter has no concept of completion
# # data to plot
# n_groups = 9


# emd_recall_arr=[0.751, 0.77, 0.785, 0.794, 0.80, 0.81, 0.802, 0.81, 0.58]
# # incomplete_arr=[float(arr[-1]/tweets[-1]) for arr in incomplete_tweets]
# # complete_arr=[float(arr[-1]/tweets[-1]) for arr in converted_tweets]
# # print(complete_arr)

# complete_arr=[0.89, 0.91, 0.922, 0.936, 0.94, 0.95, 0.946, 0.95] #baseline and 100% should be same
# time_arr=[2155.6818137168884,2270.8641290664673,2340.172202348709,2375.272013902664,2420.948536157608,3047.7655758857727,2481.43901515007,3427.780866622925,4523.75]


# print(complete_arr)
# # create plot
# fig, ax1 = plt.subplots()

# index = np.arange(n_groups)
# index2 = np.arange(n_groups-1)
# bar_width = 0.25
# opacity = 1.0

# rects1 = ax1.bar(index, emd_recall_arr, bar_width,
# alpha=opacity,
# color='b',
# # ax=ax1,
# label='EMD recall')

# rects2 = ax1.bar(index2 + 2*bar_width, complete_arr, bar_width,
# alpha=opacity,
# color='g',
# # ax=ax1,
# label='completion percentage')


# ax2 = ax1.twinx() 
# rects3 = ax2.bar(index + bar_width, time_arr, bar_width,
# alpha=opacity,
# color='r',
# # ax=ax2,
# label='completion time (secs)')


 
# ax1.set_xlabel('Reintroduction Variants')
# ax1.set_ylabel('Effectiveness estimates')
# ax2.set_ylabel('Efficiency estimates')
# plt.title('EMD Performance estimates for different reintroduction variants')
# # ax1.set_xticks(index + 1.0*bar_width, ('20', '40', '60', '80', '100'))
# ax1.set_xticks(index+ 1.0*bar_width)
# ax1.set_xticklabels(['0','20', '40', '60', '80', '100','dynamic', 'baseline', 'ritter'])

# for tick in ax1.get_xticklabels():
#         tick.set_rotation(45)


# lines, labels = ax1.get_legend_handles_labels()
# lines2, labels2 = ax2.get_legend_handles_labels()


# lgd=ax1.legend(lines + lines2, labels + labels2, bbox_to_anchor=(0.5,1.0), ncol=3, loc=9, prop={'size': 6}, borderaxespad=0.)


# plt.savefig('performance-reintroduction-threshold-all-system-variants.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
 
# # plt.tight_layout()
# plt.show()




# #EXPERIMENT 4: performance estimates for eviction thresholds: EMD F1, Tweet completion histograms

# eviction_threshold_arr=[0, 10, 20, 30, 40]
# tweets= [84152, 173400, 265842, 350484, 439043, 527834, 607569, 682913, 760389, 849446, 942989, 1028661, 1113457, 1188145, 1263202, 1338782, 1419378, 1500195, 1578692, 1657711, 1713105]
# converted_tweets= [[79916, 164186, 244499, 323944, 406836, 492040, 554309, 629498, 703320, 787582, 879170, 962364, 1052926, 1122583, 1192144, 1265401, 1341931, 1418471, 1492820, 1566154, 1619718], 
# 				   [79916, 164186, 244499, 323937, 406829, 492033, 554258, 629395, 702809, 787037, 878495, 960321, 1050692, 1119536, 1189097, 1261812, 1338220, 1414621, 1488594, 1561926, 1613216], 
# 				   [79916, 164168, 244303, 323740, 406608, 491034, 552207, 627310, 700637, 784351, 875632, 957452, 1046517, 1115264, 1184807, 1257508, 1333623, 1409983, 1483922, 1557220, 1608395], 
# 				   [79916, 164021, 244145, 323342, 406209, 490622, 551795, 626462, 699689, 783343, 874611, 956298, 1045292, 1114033, 1183562, 1255581, 1331650, 1407789, 1481537, 1554630, 1605759], 
# 				   [79916, 163738, 243861, 323048, 405899, 489537, 550709, 625301, 698493, 781377, 872617, 954291, 1042888, 1111606, 1180934, 1251965, 1327998, 1403744, 1477406, 1550456, 1601549]]
#120--> baseline same as 100, Ritter has no concept of completion
# data to plot
# n_groups = 5

# # emd_recall_arr=[,0.77,0.81,0.835,0.86,0.87,0.87]
#  #baseline and 100% should be same
# emd_recall_arr=[0.8147, 0.810, 0.805, 0.797, 0.7924]
# # incomplete_arr=[float(arr[-1]/tweets[-1]) for arr in incomplete_tweets]
# # complete_arr=[float(arr[-1]/tweets[-1]) for arr in converted_tweets]
# # print(complete_arr)

# complete_arr=[0.95, 0.943, 0.936, 0.932, 0.922]
# time_arr=[2760.48, 2631.72, 2556.53, 2440, 2325]


# print(complete_arr)
# # create plot
# fig, ax1 = plt.subplots()

# index = np.arange(n_groups)

# bar_width = 0.25
# opacity = 1.0

# rects1 = ax1.bar(index, emd_recall_arr, bar_width,
# alpha=opacity,
# color='b',
# # ax=ax1,
# label='EMD recall')

# rects2 = ax1.bar(index + 2*bar_width, complete_arr, bar_width,
# alpha=opacity,
# color='g',
# # ax=ax1,
# label='completion percentage')


# ax2 = ax1.twinx() 
# rects3 = ax2.bar(index + bar_width, time_arr, bar_width,
# alpha=opacity,
# color='r',
# # ax=ax2,
# label='completion time (secs)')


 
# ax1.set_xlabel('Eviction Variants')
# ax1.set_ylabel('Effectiveness estimates')
# ax2.set_ylabel('Efficiency estimates')
# plt.title('EMD Performance estimates for different Eviction variants')
# # ax1.set_xticks(index + 1.0*bar_width, ('20', '40', '60', '80', '100'))
# ax1.set_xticks(index+ 1.0*bar_width)
# ax1.set_xticklabels(['baseline(0)','10','20','30', '40'])

# for tick in ax1.get_xticklabels():
#         tick.set_rotation(45)


# lines, labels = ax1.get_legend_handles_labels()
# lines2, labels2 = ax2.get_legend_handles_labels()


# lgd=ax1.legend(lines + lines2, labels + labels2, bbox_to_anchor=(0.5,1.0), ncol=3, loc=9, prop={'size': 6}, borderaxespad=0.)


# plt.savefig('performance-eviction-threshold-all-system-variants.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
 
# # plt.tight_layout()
# plt.show()


# # EXPERIMENT 5: recall,fpr reintroduction ranking 

# fig, ax = plt.subplots(nrows=1, ncols=2,figsize=(7,4))

# # fig1 = plt.figure()
# # plt.hold(True)

# bottom_m_percentage=[60,70,80,90]

# batch_values= [1,2,3,4,5,6,7,8,9,10]

# eviction_ranking_recall=  [[0.6578947368421053, 0.625, 0.6611570247933884, 0.6208791208791209, 0.6311787072243346, 0.6326530612244898, 0.6475409836065574, 0.6223628691983122, 0.6393129770992366, 0.6108527131782946],
# [0.7894736842105263, 0.7222222222222222, 0.743801652892562, 0.7197802197802198, 0.7376425855513308, 0.7278911564625851, 0.7295081967213115, 0.7215189873417721, 0.7347328244274809, 0.710077519379845],
# [0.8947368421052632, 0.8194444444444444, 0.8099173553719008, 0.8186813186813187, 0.8288973384030418, 0.8197278911564626, 0.825136612021858, 0.810126582278481, 0.8244274809160306, 0.8108527131782945],
# [0.9736842105263158, 0.9166666666666666, 0.9090909090909091, 0.9065934065934066, 0.9201520912547528, 0.9149659863945578, 0.9098360655737705, 0.9008438818565401, 0.9103053435114504, 0.9038759689922481]]

# eviction_ranking_fpr= [[0.24242424242424243, 0.15764705882352941, 0.15087912087912088, 0.19858156028368795, 0.12978260869565217, 0.1267605633802817, 0.11567164179104478, 0.10060975609756098, 0.08144444444444445, 0.07511764705882353],
# [0.2631578947368421, 0.15864406779661017, 0.16981132075471697, 0.19631901840490798, 0.09813084112149532, 0.14056224899598393, 0.16025641025641027, 0.10443864229765012, 0.0895347721822542, 0.07521052631578947],
# [0.22727272727272727, 0.1623529411764706, 0.19672131147540983, 0.2074468085106383, 0.11382113821138211, 0.15140845070422534, 0.1564245810055866, 0.1232876712328767, 0.1, 0.07811764705882353],
# [0.2633061224489796, 0.16257894736842105, 0.21323529411764705, 0.22009569377990432, 0.12681159420289856, 0.16199376947040497, 0.18159203980099503, 0.13387423935091278, 0.1154562383612663, 0.08555555555555555]]



# ind=0
# for col in ax:
# 	index=0
# 	if(ind==0):
# 		array_list= eviction_ranking_recall
# 	else:
# 		array_list= eviction_ranking_fpr
# 	for array in array_list:
# 		# array_to_plot= eviction_ranking_precision_ent_nonEnt_single_sketch[array_index]
# 		col.plot(batch_values,array,label='bottom '+str(bottom_m_percentage[index])+' percentage',linestyle=':')
# 		index+=1
# 	# plt.ylabel('ranking function top-k effectiveness')
# 	col.set_xticks(np.arange(1, 10, 1.0))
# 	if(ind==0):
# 		col.set_ylabel('Recall in Inactive Candidate Identification')
# 		col.yaxis.label.set_size(10)
# 	else:
# 		col.set_ylabel('False Positive Rate in Inactive Candidate Identification')
# 		col.yaxis.label.set_size(8)
# 	col.set_xlabel('# of batches since start of stream')
# 	lgd=col.legend(bbox_to_anchor=(0.88, 1), loc=9, prop={'size': 6}, borderaxespad=0.)
# 	ind+=1
# plt.tight_layout()
# plt.suptitle('Inactive candidates ranking bottom-m percent effectiveness with distance based rankers', size=8)
# plt.savefig('inactive-bottom-m-combination.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
# plt.show()


# # EXPERIMENT 6: reintroduction ranking vs transition function

# percent_evicted= [0.625, 0.7058823529411765, 0.6274509803921569, 0.6483050847457628, 0.7207792207792207, 0.7275280898876404, 0.7053571428571429, 0.6916058394160584, 0.695, 0.8255131964809385]

# recall_tf= [0.8108108108108109, 0.7763157894736842, 0.7355371900826446, 0.8144329896907216, 0.8065693430656934, 0.8415841584158416, 0.8121546961325967, 0.7706611570247934, 0.764367816091954, 0.8707692307692307]
# recall_sketch= [0.7027027027027027, 0.7361111111111112, 0.6779661016949152, 0.6758241758241759, 0.7404562737642585, 0.7482993197278912, 0.7349726775956285, 0.7130801687763713, 0.7090076335877863, 0.8087596899224806]

# false_positive_rate_sketch= [0.24242424242424243, 0.12764705882352941, 0.16789473684210525, 0.19607843137254902, 0.0990990990990991, 0.14285714285714285, 0.15772870662460567, 0.10817941952506596, 0.08393285371702638, 0.07609929078014184]
# false_positive_rate_tf=  [0.08571428571428572, 0.04838709677419355, 0.08247422680412371, 0.036585365853658534, 0.034934497816593885, 0.05555555555555555, 0.049375, 0.04046938775510204, 0.03083720930232558, 0.008756567425569177]

# n_groups = 10

# # emd_recall_arr=[,0.77,0.81,0.835,0.86,0.87,0.87]
#  #baseline and 100% should be same

# # incomplete_arr=[float(arr[-1]/tweets[-1]) for arr in incomplete_tweets]
# # complete_arr=[float(arr[-1]/tweets[-1]) for arr in converted_tweets]
# # print(complete_arr)


# # create plot
# fig, ax1 = plt.subplots()

# index = np.arange(n_groups)

# bar_width = 0.15
# inter_bar= 0.05
# opacity = 0.6

# rects1 = ax1.bar(index, percent_evicted, bar_width,
# alpha=opacity,
# color='b',
# # ax=ax1,
# label='eviction percentage')

# rects2 = ax1.bar(index + bar_width + inter_bar, recall_sketch, bar_width,
# alpha=opacity,
# color='g',
# # ax=ax1,
# hatch="\\",
# label='recall w distance based rankers')

# rects3 = ax1.bar(index + 2*bar_width + inter_bar, recall_tf, bar_width,
# alpha=opacity,
# color='g',
# # ax=ax1,
# hatch="O",
# label='recall w transition function')


# rects4 = ax1.bar(index + 3*bar_width + 2*inter_bar, false_positive_rate_sketch, bar_width,
# alpha=opacity,
# color='r',
# hatch="\\",
# label='fpr w distance based rankers')

# rects5 = ax1.bar(index + 4*bar_width + 2*inter_bar, false_positive_rate_tf, bar_width,
# alpha=opacity,
# color='r',
# hatch="O",
# label='fpr w transition function')


 
# ax1.set_xlabel('# of batches since start')
# ax1.set_ylabel('Ranking Effectiveness (percentage)')
# # ax2.set_ylabel('Efficiency estimates')
# plt.title('Inactive Candidate Identification with Different Ranking Functions')
# # ax1.set_xticks(index + 1.0*bar_width, ('20', '40', '60', '80', '100'))
# ax1.set_xticks(index+ 2.0*bar_width+ 2.0*inter_bar)
# ax1.set_xticklabels(['1','2','3','4','5','6','7','8','9','10'])

# for tick in ax1.get_xticklabels():
#         tick.set_rotation(45)


# lines, labels = ax1.get_legend_handles_labels()
# # lines2, labels2 = ax2.get_legend_handles_labels()


# lgd=ax1.legend(lines, labels, bbox_to_anchor=(0.5,1.005), ncol=3, loc=9, prop={'size': 6}, framealpha=0.3, borderaxespad=0.)


# plt.savefig('transition-vs-distance.png', dpi = 900, bbox_extra_artists=(lgd,), bbox_inches='tight')
 
# # plt.tight_layout()
# plt.show()